[{"/Users/simen/repos/jest/packages/pretty-format/src/__tests__/AsymmetricMatcher.test.ts":"1","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/DOMCollection.test.ts":"2","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/DOMElement.test.ts":"3","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/Immutable.test.ts":"4","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/ReactElement.test.ts":"5","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/prettyFormat.test.ts":"6","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/setPrettyPrint.ts":"7","/Users/simen/repos/jest/packages/pretty-format/src/collections.ts":"8","/Users/simen/repos/jest/packages/pretty-format/src/index.ts":"9","/Users/simen/repos/jest/packages/pretty-format/src/plugins/AsymmetricMatcher.ts":"10","/Users/simen/repos/jest/packages/pretty-format/src/plugins/DOMCollection.ts":"11","/Users/simen/repos/jest/packages/pretty-format/src/plugins/DOMElement.ts":"12","/Users/simen/repos/jest/packages/pretty-format/src/plugins/Immutable.ts":"13","/Users/simen/repos/jest/packages/pretty-format/src/plugins/ReactElement.ts":"14","/Users/simen/repos/jest/packages/pretty-format/src/plugins/ReactTestComponent.ts":"15","/Users/simen/repos/jest/packages/pretty-format/src/plugins/lib/escapeHTML.ts":"16","/Users/simen/repos/jest/packages/pretty-format/src/plugins/lib/markup.ts":"17","/Users/simen/repos/jest/packages/pretty-format/src/types.ts":"18"},{"size":9377,"mtime":1665737657526,"results":"19","hashOfConfig":"20"},{"size":4041,"mtime":1665737657526,"results":"21","hashOfConfig":"20"},{"size":16588,"mtime":1665737657526,"results":"22","hashOfConfig":"20"},{"size":30022,"mtime":1665737657526,"results":"23","hashOfConfig":"20"},{"size":1478,"mtime":1665737657526,"results":"24","hashOfConfig":"20"},{"size":26626,"mtime":1665737657527,"results":"25","hashOfConfig":"20"},{"size":1721,"mtime":1665737657527,"results":"26","hashOfConfig":"20"},{"size":5195,"mtime":1665737657527,"results":"27","hashOfConfig":"20"},{"size":14104,"mtime":1665737657527,"results":"28","hashOfConfig":"20"},{"size":2213,"mtime":1664535326165,"results":"29","hashOfConfig":"20"},{"size":1941,"mtime":1664535326165,"results":"30","hashOfConfig":"20"},{"size":3102,"mtime":1663311355544,"results":"31","hashOfConfig":"20"},{"size":5597,"mtime":1664535326166,"results":"32","hashOfConfig":"20"},{"size":2962,"mtime":1664535326166,"results":"33","hashOfConfig":"20"},{"size":1969,"mtime":1662710982194,"results":"34","hashOfConfig":"20"},{"size":329,"mtime":1650373335000,"results":"35","hashOfConfig":"20"},{"size":3194,"mtime":1664535326166,"results":"36","hashOfConfig":"20"},{"size":2204,"mtime":1665737657528,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vfk0ks",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":28,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":66,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":25,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":15,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":53,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":33,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/simen/repos/jest/packages/pretty-format/src/__tests__/AsymmetricMatcher.test.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/__tests__/DOMCollection.test.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/__tests__/DOMElement.test.ts",["103"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @jest-environment jsdom\n */\n\n/// <reference lib=\"dom\" />\n\n/* eslint-env browser*/\n\nimport prettyFormat, {plugins} from '../';\nimport setPrettyPrint from './setPrettyPrint';\n\nconst {DOMElement} = plugins;\n\nsetPrettyPrint([DOMElement]);\n\ndescribe('pretty-format', () => {\n  // Test is not related to plugin but is related to jsdom testing environment.\n  it('prints global window as constructor name alone', () => {\n    expect(prettyFormat(window)).toBe('[Window]');\n  });\n});\n\ndescribe('DOMElement Plugin', () => {\n  it('supports a single HTML element', () => {\n    expect(document.createElement('div')).toPrettyPrintTo('<div />');\n  });\n\n  it('supports an HTML element with a class property', () => {\n    const parent = document.createElement('div');\n    parent.className = 'classy';\n\n    expect(parent).toPrettyPrintTo('<div\\n  class=\"classy\"\\n/>');\n  });\n\n  it('supports an HTML element with a title property', () => {\n    const parent = document.createElement('div');\n    parent.title = 'title text';\n\n    expect(parent).toPrettyPrintTo('<div\\n  title=\"title text\"\\n/>');\n  });\n\n  test('escapes double quote in attribute value', () => {\n    const parent = document.createElement('div');\n    parent.setAttribute('title', '\"escape\"');\n\n    expect(parent).toPrettyPrintTo('<div\\n  title=\"\\\\\"escape\\\\\"\"\\n/>');\n  });\n\n  it('supports an HTML element with a single attribute', () => {\n    const parent = document.createElement('div');\n    parent.setAttribute('class', 'classy');\n\n    expect(parent).toPrettyPrintTo('<div\\n  class=\"classy\"\\n/>');\n  });\n\n  it('supports an HTML element with multiple attributes', () => {\n    const parent = document.createElement('div');\n    // set attributes in unsorted order by name to verify sorting\n    parent.setAttribute('id', '123');\n    parent.setAttribute('class', 'classy');\n\n    expect(parent).toPrettyPrintTo('<div\\n  class=\"classy\"\\n  id=\"123\"\\n/>');\n  });\n\n  it('supports an HTML element with attribute and text content', () => {\n    const parent = document.createElement('div');\n    parent.setAttribute('style', 'color: #99424F');\n    const text = document.createTextNode('Jest');\n    parent.appendChild(text);\n\n    expect(parent).toPrettyPrintTo(\n      '<div\\n  style=\"color: #99424F\"\\n>\\n  Jest\\n</div>',\n    );\n  });\n\n  it('supports an element with text content', () => {\n    const parent = document.createElement('div');\n    const child = document.createTextNode('texty texty');\n    parent.appendChild(child);\n\n    expect(parent).toPrettyPrintTo('<div>\\n  texty texty\\n</div>');\n  });\n\n  it('supports nested elements', () => {\n    const parent = document.createElement('div');\n    const child = document.createElement('span');\n    parent.appendChild(child);\n    expect(parent).toPrettyPrintTo('<div>\\n  <span />\\n</div>');\n  });\n\n  it('supports nested elements with attributes', () => {\n    const parent = document.createElement('div');\n    const child = document.createElement('span');\n    parent.appendChild(child);\n\n    // set attributes in sorted order by name\n    child.setAttribute('class', 'classy');\n    child.setAttribute('id', '123');\n\n    expect(parent).toPrettyPrintTo(\n      '<div>\\n  <span\\n    class=\"classy\"\\n    id=\"123\"\\n  />\\n</div>',\n    );\n  });\n\n  it('supports nested elements with attribute and text content', () => {\n    const parent = document.createElement('div');\n    const child = document.createElement('span');\n    parent.appendChild(child);\n\n    child.setAttribute('style', 'color: #99424F');\n    const text = document.createTextNode('Jest');\n    child.appendChild(text);\n\n    expect(parent).toPrettyPrintTo(\n      '<div>\\n  <span\\n    style=\"color: #99424F\"\\n  >\\n    Jest\\n  </span>\\n</div>',\n    );\n  });\n\n  it('supports nested elements with text content', () => {\n    const parent = document.createElement('div');\n    const child = document.createElement('span');\n    parent.appendChild(child);\n    child.textContent = 'texty texty';\n\n    expect(parent).toPrettyPrintTo(\n      '<div>\\n  <span>\\n    texty texty\\n  </span>\\n</div>',\n    );\n  });\n\n  it('supports siblings', () => {\n    const parent = document.createElement('div');\n    parent.innerHTML = '<span>some </span><span>text</span>';\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<div>',\n        '  <span>',\n        '    some ',\n        '  </span>',\n        '  <span>',\n        '    text',\n        '  </span>',\n        '</div>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports multiline text node in pre', () => {\n    const parent = document.createElement('pre');\n    parent.innerHTML = [\n      // prettier-ignore\n      'function sum(a, b) {',\n      '  return a + b;',\n      '}',\n    ].join('\\n');\n\n    // Ouch. Two lines of text have same indentation for different reason:\n    // First line of text node because it is at child level.\n    // Second line of text node because they are in its content.\n    expect(parent).toPrettyPrintTo(\n      // prettier-ignore\n      [\n        '<pre>',\n        '  function sum(a, b) {',\n        '  return a + b;',\n        '}',\n        '</pre>'\n      ].join('\\n'),\n    );\n  });\n\n  it('supports multiline text node preceding span in pre', () => {\n    const parent = document.createElement('pre');\n    parent.innerHTML = [\n      '<span class=\"token keyword\">function</span> sum(a, b) {',\n      '  <span class=\"token keyword\">return</span> a + b;',\n      '}',\n    ].join('\\n');\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<pre>',\n        '  <span',\n        '    class=\"token keyword\"',\n        '  >',\n        '    function',\n        '  </span>',\n        '   sum(a, b) {',\n        '  ',\n        '  <span',\n        '    class=\"token keyword\"',\n        '  >',\n        '    return',\n        '  </span>',\n        '   a + b;',\n        '}',\n        '</pre>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports multiline text node in textarea', () => {\n    const textarea = document.createElement('textarea');\n    textarea.setAttribute('name', 'tagline');\n    textarea.innerHTML = `Painless.\nJavaScript.\nTesting.`;\n\n    expect(textarea).toPrettyPrintTo(\n      [\n        '<textarea',\n        '  name=\"tagline\"',\n        '>',\n        '  Painless.',\n        'JavaScript.',\n        'Testing.',\n        '</textarea>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports empty text node', () => {\n    // React 16 does not render text in comments (see below)\n    const parent = document.createElement('span');\n    const text = document.createTextNode('');\n    parent.appendChild(text);\n    const abbr = document.createElement('abbr');\n    abbr.setAttribute('title', 'meter');\n    abbr.innerHTML = 'm';\n    parent.appendChild(abbr);\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<span>',\n        '  ',\n        '  <abbr',\n        '    title=\"meter\"',\n        '  >',\n        '    m',\n        '  </abbr>',\n        '</span>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports non-empty text node', () => {\n    // React 16 does not render text in comments (see below)\n    const parent = document.createElement('p');\n    parent.innerHTML = [\n      '<strong>Jest</strong>',\n      ' means ',\n      '<em>painless</em>',\n      ' Javascript testing',\n    ].join('');\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<p>',\n        '  <strong>',\n        '    Jest',\n        '  </strong>',\n        '   means ',\n        '  <em>',\n        '    painless',\n        '  </em>',\n        '   Javascript testing',\n        '</p>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports comment node', () => {\n    // React 15 does render text in comments\n    const parent = document.createElement('p');\n    parent.innerHTML = [\n      '<strong>Jest</strong>',\n      '<!-- react-text: 3 -->',\n      ' means ',\n      '<!-- /react-text -->',\n      '<em>painless</em>',\n      '<!-- react-text: 5 -->',\n      ' Javascript testing',\n      '<!-- /react-text -->',\n    ].join('');\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<p>',\n        '  <strong>',\n        '    Jest',\n        '  </strong>',\n        '  <!-- react-text: 3 -->',\n        '   means ',\n        '  <!-- /react-text -->',\n        '  <em>',\n        '    painless',\n        '  </em>',\n        '  <!-- react-text: 5 -->',\n        '   Javascript testing',\n        '  <!-- /react-text -->',\n        '</p>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports fragment node', () => {\n    const fragment = document.createDocumentFragment();\n    const browsers = [\n      'Firefox',\n      'Chrome',\n      'Opera',\n      'Safari',\n      'Internet Explorer',\n    ];\n\n    browsers.forEach(browser => {\n      const li = document.createElement('li');\n      li.textContent = browser;\n      fragment.appendChild(li);\n    });\n\n    expect(fragment).toPrettyPrintTo(\n      [\n        '<DocumentFragment>',\n        '  <li>',\n        '    Firefox',\n        '  </li>',\n        '  <li>',\n        '    Chrome',\n        '  </li>',\n        '  <li>',\n        '    Opera',\n        '  </li>',\n        '  <li>',\n        '    Safari',\n        '  </li>',\n        '  <li>',\n        '    Internet Explorer',\n        '  </li>',\n        '</DocumentFragment>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports custom elements', () => {\n    class CustomElement extends HTMLElement {}\n    class CustomParagraphElement extends HTMLParagraphElement {}\n    class CustomExtendedElement extends CustomElement {}\n\n    customElements.define('custom-element', CustomElement);\n    customElements.define('custom-extended-element', CustomExtendedElement);\n    customElements.define('custom-paragraph', CustomParagraphElement, {\n      extends: 'p',\n    });\n\n    const parent = document.createElement('div');\n    parent.innerHTML = [\n      '<custom-element></custom-element>',\n      '<custom-extended-element></custom-extended-element>',\n      '<p is=\"custom-paragraph\"></p>',\n    ].join('');\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<div>',\n        '  <custom-element />',\n        '  <custom-extended-element />',\n        '  <p',\n        '    is=\"custom-paragraph\"',\n        '  />',\n        '</div>',\n      ].join('\\n'),\n    );\n  });\n\n  describe('matches constructor name of SVG elements', () => {\n    // Too bad, so sad, element.constructor.name of SVG elements\n    // is HTMLUnknownElement in jsdom v9 and v10\n    // is Element in jsdom v11\n    // instead of SVG…Element in browser DOM\n    const expected = [\n      '<svg',\n      '  viewBox=\"0 0 1 1\"',\n      '>',\n      '  <title>',\n      '    JS community logo',\n      '  </title>',\n      '</svg>',\n    ].join('\\n');\n\n    test('jsdom 9 and 10', () => {\n      // Mock element objects to make sure the plugin really matches them.\n      class SVGSVGElement {\n        childNodes: Array<SVGTitleElement>;\n        nodeType = 1;\n        tagName = 'svg'; // lower case;\n\n        constructor(\n          public attributes: Array<Record<string, string>>,\n          ...children: Array<SVGTitleElement>\n        ) {\n          this.childNodes = children;\n        }\n      }\n\n      class SVGTitleElement {\n        attributes: Array<Record<string, string>> = [];\n        childNodes: Array<ChildNode>;\n        nodeType = 1;\n        tagName = 'title'; // lower case;\n\n        constructor(title: string) {\n          this.childNodes = [document.createTextNode(title)];\n        }\n      }\n\n      const title = new SVGTitleElement('JS community logo');\n      const svg = new SVGSVGElement(\n        [{name: 'viewBox', value: '0 0 1 1'}],\n        title,\n      );\n\n      expect(svg).toPrettyPrintTo(expected);\n    });\n    test('jsdom 11', () => {\n      // Mock element objects to make sure the plugin really matches them.\n      class Element {\n        childNodes: Array<Element | string>;\n        nodeType = 1;\n\n        constructor(\n          public tagName: string,\n          public attributes: Array<Record<string, string>>,\n          ...children: Array<Element | string>\n        ) {\n          this.childNodes = children;\n        }\n      }\n\n      const title = new Element('title', [], 'JS community logo');\n      const svg = new Element(\n        'svg',\n        [{name: 'viewBox', value: '0 0 1 1'}],\n        title,\n      );\n\n      expect(svg).toPrettyPrintTo(expected);\n    });\n  });\n\n  it('supports SVG elements', () => {\n    // In jsdom v9, this is NOT a regression test. See above.\n    const namespace = 'http://www.w3.org/2000/svg';\n\n    const title = document.createElementNS(namespace, 'title');\n    title.appendChild(document.createTextNode('JS community logo'));\n\n    const rect = document.createElementNS(namespace, 'rect');\n    // printProps sorts attributes in order by name\n    rect.setAttribute('width', '1');\n    rect.setAttribute('height', '1');\n    rect.setAttribute('fill', '#f7df1e');\n\n    const polyline = document.createElementNS(namespace, 'polyline');\n    polyline.setAttribute('id', 'J');\n    polyline.setAttribute('points', '0.5,0.460 0.5,0.875 0.25,0.875');\n    const comment = document.createComment('polyline for S');\n\n    const g = document.createElementNS(namespace, 'g');\n    g.setAttribute('fill', 'none');\n    g.setAttribute('stroke', '#000000');\n    g.setAttribute('stroke-width', '0.095');\n    g.appendChild(polyline);\n    g.appendChild(comment);\n\n    const svg = document.createElementNS(namespace, 'svg');\n    svg.setAttribute('viewBox', '0 0 1 1');\n    svg.appendChild(title);\n    svg.appendChild(rect);\n    svg.appendChild(g);\n\n    const parent = document.createElement('div');\n    parent.setAttribute('id', 'JS');\n    parent.appendChild(svg);\n\n    expect(parent).toPrettyPrintTo(\n      [\n        '<div',\n        '  id=\"JS\"',\n        '>',\n        '  <svg',\n        '    viewBox=\"0 0 1 1\"',\n        '  >',\n        '    <title>',\n        '      JS community logo',\n        '    </title>',\n        '    <rect',\n        '      fill=\"#f7df1e\"',\n        '      height=\"1\"',\n        '      width=\"1\"',\n        '    />',\n        '    <g',\n        '      fill=\"none\"',\n        '      stroke=\"#000000\"',\n        '      stroke-width=\"0.095\"',\n        '    >',\n        '      <polyline',\n        '        id=\"J\"',\n        '        points=\"0.5,0.460 0.5,0.875 0.25,0.875\"',\n        '      />',\n        '      <!--polyline for S-->',\n        '    </g>',\n        '  </svg>',\n        '</div>',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports indentation for array of elements', () => {\n    // For example, Array.prototype.slice.call(document.getElementsByTagName(…))\n    const dd1 = document.createElement('dd');\n    dd1.innerHTML = 'to talk in a playful manner';\n\n    const dd2 = document.createElement('dd');\n    dd2.innerHTML = 'painless JavaScript testing';\n    dd2.setAttribute('style', 'color: #99424F');\n\n    expect([dd1, dd2]).toPrettyPrintTo(\n      [\n        'Array [',\n        '  <dd>',\n        '    to talk in a playful manner',\n        '  </dd>,',\n        '  <dd',\n        '    style=\"color: #99424F\"',\n        '  >',\n        '    painless JavaScript testing',\n        '  </dd>,',\n        ']',\n      ].join('\\n'),\n    );\n  });\n\n  it('supports maxDepth option', () => {\n    const dt = document.createElement('dt');\n    dt.innerHTML = 'jest';\n\n    const dd1 = document.createElement('dd');\n    dd1.innerHTML = 'to talk in a <em>playful</em> manner';\n\n    const dd2 = document.createElement('dd');\n    dd2.innerHTML = '<em>painless</em> JavaScript testing';\n    dd2.setAttribute('style', 'color: #99424F');\n\n    const dl = document.createElement('dl');\n    dl.appendChild(dt);\n    dl.appendChild(dd1);\n    dl.appendChild(dd2);\n\n    expect(dl).toPrettyPrintTo(\n      [\n        '<dl>',\n        '  <dt>',\n        '    jest',\n        '  </dt>',\n        '  <dd>',\n        '    to talk in a ',\n        '    <em … />',\n        '     manner',\n        '  </dd>',\n        '  <dd',\n        '    style=\"color: #99424F\"',\n        '  >',\n        '    <em … />',\n        '     JavaScript testing',\n        '  </dd>',\n        '</dl>',\n      ].join('\\n'),\n      {maxDepth: 2},\n    );\n  });\n\n  it('handles `tagName` not being a string', () => {\n    expect({\n      name: 'value',\n      tagName: {text: 'param'},\n      type: 'string',\n    }).toPrettyPrintTo(\n      [\n        'Object {',\n        '  \"name\": \"value\",',\n        '  \"tagName\": Object {',\n        '    \"text\": \"param\",',\n        '  },',\n        '  \"type\": \"string\",',\n        '}',\n      ].join('\\n'),\n    );\n  });\n\n  it('handles jsdom attributes properly', () => {\n    const attributes = require('jsdom/lib/jsdom/living/attributes');\n    expect(DOMElement.test(attributes)).toBe(false);\n  });\n});\n","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/Immutable.test.ts",["104","105"],["106"],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/prefer-rest-params-eventually */\n\nimport * as Immutable from 'immutable';\nimport * as React from 'react';\nimport {plugins} from '../';\nimport setPrettyPrint from './setPrettyPrint';\n\nconst {Immutable: ImmutablePlugin, ReactElement} = plugins;\n\nsetPrettyPrint([ReactElement, ImmutablePlugin]);\n\nit('does not incorrectly match identity-obj-proxy as Immutable object', () => {\n  // SENTINEL constant is from https://github.com/immutable-js/immutable-js\n  const IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\n  const val: any = {};\n  val[IS_ITERABLE_SENTINEL] = IS_ITERABLE_SENTINEL; // mock the mock object :)\n  const expected = `{\"${IS_ITERABLE_SENTINEL}\": \"${IS_ITERABLE_SENTINEL}\"}`;\n  expect(val).toPrettyPrintTo(expected, {min: true});\n});\n\ndescribe('Immutable.OrderedSet', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.OrderedSet([])).toPrettyPrintTo(\n      'Immutable.OrderedSet []',\n      {min: true},\n    );\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.OrderedSet([])).toPrettyPrintTo(\n      'Immutable.OrderedSet []',\n      {min: false},\n    );\n  });\n\n  it('supports a single string element', () => {\n    expect(Immutable.OrderedSet(['foo'])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\"foo\"]',\n      {min: true},\n    );\n  });\n\n  it('supports a single integer element', () => {\n    expect(Immutable.OrderedSet([1])).toPrettyPrintTo(\n      'Immutable.OrderedSet [1]',\n      {min: true},\n    );\n  });\n\n  it('supports multiple string elements {min: true}', () => {\n    expect(Immutable.OrderedSet(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\"jhon\", \"mike\", \"cristian\"]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports multiple string elements {min: false}', () => {\n    expect(Immutable.OrderedSet(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\\n  \"jhon\",\\n  \"mike\",\\n  \"cristian\",\\n]',\n      {min: false},\n    );\n  });\n\n  it('supports multiple integer elements {min: true}', () => {\n    expect(Immutable.OrderedSet([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.OrderedSet [1, 2, 3]',\n      {min: true},\n    );\n  });\n\n  it('supports multiple integer elements {min: false}', () => {\n    expect(Immutable.OrderedSet([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\\n  1,\\n  2,\\n  3,\\n]',\n      {\n        min: false,\n      },\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.OrderedSet([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.OrderedSet [{\"a\": 1, \"b\": 2, \"c\": 3}]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.OrderedSet([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\\n  Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n]',\n      {min: false},\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.OrderedSet([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.OrderedSet [<Mouse>Hello World</Mouse>]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.OrderedSet([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.OrderedSet [\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n]',\n      {min: false},\n    );\n  });\n});\n\ndescribe('Immutable.List', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.List([])).toPrettyPrintTo('Immutable.List []', {\n      min: true,\n    });\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.List([])).toPrettyPrintTo('Immutable.List []', {\n      min: false,\n    });\n  });\n\n  it('supports a single string element', () => {\n    expect(Immutable.List(['foo'])).toPrettyPrintTo('Immutable.List [\"foo\"]', {\n      min: true,\n    });\n  });\n\n  it('supports a single integer element', () => {\n    expect(Immutable.List([1])).toPrettyPrintTo('Immutable.List [1]', {\n      min: true,\n    });\n  });\n\n  it('supports multiple string elements {min: true}', () => {\n    expect(Immutable.List(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.List [\"jhon\", \"mike\", \"cristian\"]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports multiple string elements {min: false}', () => {\n    expect(Immutable.List(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.List [\\n  \"jhon\",\\n  \"mike\",\\n  \"cristian\",\\n]',\n    );\n  });\n\n  it('supports multiple integer elements {min: true}', () => {\n    expect(Immutable.List([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.List [1, 2, 3]',\n      {min: true},\n    );\n  });\n\n  it('supports multiple integer elements {min: false}', () => {\n    expect(Immutable.List([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.List [\\n  1,\\n  2,\\n  3,\\n]',\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.List([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.List [{\"a\": 1, \"b\": 2, \"c\": 3}]',\n      {min: true},\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.List([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.List [\\n  Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n]',\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.List([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.List [<Mouse>Hello World</Mouse>, <Mouse>Hello World</Mouse>]',\n      {min: true},\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.List([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.List [\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n]',\n    );\n  });\n});\n\ndescribe('Immutable.Stack', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.Stack([])).toPrettyPrintTo('Immutable.Stack []', {\n      min: true,\n    });\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.Stack([])).toPrettyPrintTo('Immutable.Stack []', {\n      min: false,\n    });\n  });\n\n  it('supports a single string element', () => {\n    expect(Immutable.Stack(['foo'])).toPrettyPrintTo(\n      'Immutable.Stack [\"foo\"]',\n      {min: true},\n    );\n  });\n\n  it('supports a single integer element', () => {\n    expect(Immutable.Stack([1])).toPrettyPrintTo('Immutable.Stack [1]', {\n      min: true,\n    });\n  });\n\n  it('supports multiple string elements {min: true}', () => {\n    expect(Immutable.Stack(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.Stack [\"jhon\", \"mike\", \"cristian\"]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports multiple string elements {min: false}', () => {\n    expect(Immutable.Stack(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.Stack [\\n  \"jhon\",\\n  \"mike\",\\n  \"cristian\",\\n]',\n    );\n  });\n\n  it('supports multiple integer elements {min: true}', () => {\n    expect(Immutable.Stack([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.Stack [1, 2, 3]',\n      {min: true},\n    );\n  });\n\n  it('supports multiple integer elements {min: false}', () => {\n    expect(Immutable.Stack([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.Stack [\\n  1,\\n  2,\\n  3,\\n]',\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.Stack([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.Stack [{\"a\": 1, \"b\": 2, \"c\": 3}]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.Stack([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.Stack [\\n  Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n]',\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Stack([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.Stack [<Mouse>Hello World</Mouse>, <Mouse>Hello World</Mouse>]',\n      {min: true},\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Stack([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.Stack [\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n]',\n    );\n  });\n});\n\ndescribe('Immutable.Set', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.Set([])).toPrettyPrintTo('Immutable.Set []', {min: true});\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.Set([])).toPrettyPrintTo('Immutable.Set []', {\n      min: false,\n    });\n  });\n\n  it('supports a single string element', () => {\n    expect(Immutable.Set(['foo'])).toPrettyPrintTo('Immutable.Set [\"foo\"]', {\n      min: true,\n    });\n  });\n\n  it('supports a single integer element', () => {\n    expect(Immutable.Set([1])).toPrettyPrintTo('Immutable.Set [1]', {\n      min: true,\n    });\n  });\n\n  it('supports multiple string elements {min: true}', () => {\n    expect(Immutable.Set(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.Set [\"jhon\", \"mike\", \"cristian\"]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports multiple string elements {min: false}', () => {\n    expect(Immutable.Set(['jhon', 'mike', 'cristian'])).toPrettyPrintTo(\n      'Immutable.Set [\\n  \"jhon\",\\n  \"mike\",\\n  \"cristian\",\\n]',\n    );\n  });\n\n  it('supports multiple integer elements {min: true}', () => {\n    expect(Immutable.Set([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.Set [1, 2, 3]',\n      {min: true},\n    );\n  });\n\n  it('supports multiple integer elements {min: false}', () => {\n    expect(Immutable.Set([1, 2, 3])).toPrettyPrintTo(\n      'Immutable.Set [\\n  1,\\n  2,\\n  3,\\n]',\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.Set([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.Set [{\"a\": 1, \"b\": 2, \"c\": 3}]',\n      {min: true},\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.Set([{a: 1, b: 2, c: 3}])).toPrettyPrintTo(\n      'Immutable.Set [\\n  Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n]',\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Set([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.Set [<Mouse>Hello World</Mouse>]',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Set([reactElement, reactElement])).toPrettyPrintTo(\n      'Immutable.Set [\\n  <Mouse>\\n    Hello World\\n  </Mouse>,\\n]',\n    );\n  });\n});\n\ndescribe('Immutable.Map', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.Map({})).toPrettyPrintTo('Immutable.Map {}', {min: true});\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.Map({})).toPrettyPrintTo('Immutable.Map {}', {\n      min: false,\n    });\n  });\n\n  it('supports an object with single key', () => {\n    expect(Immutable.Map({a: 1})).toPrettyPrintTo('Immutable.Map {\"a\": 1}', {\n      min: true,\n    });\n  });\n\n  it('supports an object with multiple keys {min: true}', () => {\n    expect(Immutable.Map({a: 1, b: 2, c: 3})).toPrettyPrintTo(\n      'Immutable.Map {\"a\": 1, \"b\": 2, \"c\": 3}',\n      {min: true},\n    );\n  });\n\n  it('supports an object with multiple keys {min: false}', () => {\n    expect(Immutable.Map({a: 1, b: 2, c: 3})).toPrettyPrintTo(\n      'Immutable.Map {\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3,\\n}',\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.Map({key: {a: 1, b: 2, c: 3}})).toPrettyPrintTo(\n      'Immutable.Map {\"key\": {\"a\": 1, \"b\": 2, \"c\": 3}}',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.Map({key: {a: 1, b: 2, c: 3}})).toPrettyPrintTo(\n      'Immutable.Map {\\n  \"key\": Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n}',\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Map({a: reactElement, b: reactElement})).toPrettyPrintTo(\n      'Immutable.Map {\"a\": <Mouse>Hello World</Mouse>, \"b\": <Mouse>Hello World</Mouse>}',\n      {min: true},\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(Immutable.Map({a: reactElement, b: reactElement})).toPrettyPrintTo(\n      'Immutable.Map {\\n  \"a\": <Mouse>\\n    Hello World\\n  </Mouse>,\\n  \"b\": <Mouse>\\n    Hello World\\n  </Mouse>,\\n}',\n    );\n  });\n});\n\ndescribe('Immutable.OrderedMap', () => {\n  it('supports an empty collection {min: true}', () => {\n    expect(Immutable.OrderedMap({})).toPrettyPrintTo(\n      'Immutable.OrderedMap {}',\n      {min: true},\n    );\n  });\n\n  it('supports an empty collection {min: false}', () => {\n    expect(Immutable.OrderedMap({})).toPrettyPrintTo(\n      'Immutable.OrderedMap {}',\n      {min: false},\n    );\n  });\n\n  it('supports an object with single key', () => {\n    expect(Immutable.OrderedMap({a: 1})).toPrettyPrintTo(\n      'Immutable.OrderedMap {\"a\": 1}',\n      {min: true},\n    );\n  });\n\n  it('supports an object with multiple keys {min: true}', () => {\n    expect(Immutable.OrderedMap({a: 1, b: 2, c: 3})).toPrettyPrintTo(\n      'Immutable.OrderedMap {\"a\": 1, \"b\": 2, \"c\": 3}',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports an object with multiple keys {min: false}', () => {\n    expect(Immutable.OrderedMap({a: 1, b: 2, c: 3})).toPrettyPrintTo(\n      'Immutable.OrderedMap {\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3,\\n}',\n    );\n  });\n\n  it('supports object elements {min: true}', () => {\n    expect(Immutable.OrderedMap({key: {a: 1, b: 2, c: 3}})).toPrettyPrintTo(\n      'Immutable.OrderedMap {\"key\": {\"a\": 1, \"b\": 2, \"c\": 3}}',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports object elements {min: false}', () => {\n    expect(Immutable.OrderedMap({key: {a: 1, b: 2, c: 3}})).toPrettyPrintTo(\n      'Immutable.OrderedMap {\\n  \"key\": Object {\\n    \"a\": 1,\\n    \"b\": 2,\\n    \"c\": 3,\\n  },\\n}',\n    );\n  });\n\n  it('supports React elements {min: true}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(\n      Immutable.OrderedMap({a: reactElement, b: reactElement}),\n    ).toPrettyPrintTo(\n      'Immutable.OrderedMap {\"a\": <Mouse>Hello World</Mouse>, \"b\": <Mouse>Hello World</Mouse>}',\n      {min: true},\n    );\n  });\n\n  it('supports React elements {min: false}', () => {\n    const reactElement = React.createElement('Mouse', null, 'Hello World');\n    expect(\n      Immutable.OrderedMap({a: reactElement, b: reactElement}),\n    ).toPrettyPrintTo(\n      'Immutable.OrderedMap {\\n  \"a\": <Mouse>\\n    Hello World\\n  </Mouse>,\\n  \"b\": <Mouse>\\n    Hello World\\n  </Mouse>,\\n}',\n    );\n  });\n\n  it('supports non-string keys', () => {\n    const val = Immutable.OrderedMap<unknown, unknown>([\n      [false, 'boolean'],\n      ['false', 'string'],\n      [0, 'number'],\n      ['0', 'string'],\n      [null, 'null'],\n      ['null', 'string'],\n      [undefined, 'undefined'],\n      ['undefined', 'string'],\n      [Symbol('description'), 'symbol'],\n      ['Symbol(description)', 'string'],\n      [['array', 'key'], 'array'],\n      [{key: 'value'}, 'object'],\n      [Immutable.Map({key: 'value'}), 'immutable map'],\n    ]);\n    const expected = [\n      'Immutable.OrderedMap {',\n      '  false: \"boolean\",',\n      '  \"false\": \"string\",',\n      '  0: \"number\",',\n      '  \"0\": \"string\",',\n      '  null: \"null\",',\n      '  \"null\": \"string\",',\n      '  undefined: \"undefined\",',\n      '  \"undefined\": \"string\",',\n      '  Symbol(description): \"symbol\",',\n      '  \"Symbol(description)\": \"string\",',\n      '  Array [',\n      '    \"array\",',\n      '    \"key\",',\n      '  ]: \"array\",',\n      '  Object {',\n      '    \"key\": \"value\",',\n      '  }: \"object\",',\n      '  Immutable.Map {',\n      '    \"key\": \"value\",',\n      '  }: \"immutable map\",',\n      '}',\n    ].join('\\n');\n    expect(val).toPrettyPrintTo(expected);\n  });\n});\n\ndescribe('Immutable.Record', () => {\n  it('supports an empty record {min: true}', () => {\n    const ABRecord = Immutable.Record({}, 'ABRecord');\n\n    expect(ABRecord()).toPrettyPrintTo('Immutable.ABRecord {}', {\n      min: true,\n    });\n  });\n\n  it('supports an empty record {min: false}', () => {\n    const ABRecord = Immutable.Record({}, 'ABRecord');\n\n    expect(ABRecord()).toPrettyPrintTo('Immutable.ABRecord {}', {\n      min: false,\n    });\n  });\n\n  it('supports a record with descriptive name', () => {\n    const ABRecord = Immutable.Record({a: 1, b: 2}, 'ABRecord');\n\n    expect(ABRecord()).toPrettyPrintTo('Immutable.ABRecord {\"a\": 1, \"b\": 2}', {\n      min: true,\n    });\n  });\n\n  it('supports a record without descriptive name', () => {\n    const ABRecord = Immutable.Record({a: 1, b: 2});\n\n    expect(ABRecord()).toPrettyPrintTo('Immutable.Record {\"a\": 1, \"b\": 2}', {\n      min: true,\n    });\n  });\n\n  it('supports a record with values {min: true}', () => {\n    const ABRecord = Immutable.Record({a: 1, b: 2}, 'ABRecord');\n\n    expect(ABRecord({a: 3, b: 4})).toPrettyPrintTo(\n      'Immutable.ABRecord {\"a\": 3, \"b\": 4}',\n      {min: true},\n    );\n  });\n\n  it('supports a record with values {min: false}', () => {\n    const ABRecord = Immutable.Record({a: 1, b: 2}, 'ABRecord');\n\n    expect(ABRecord({a: 3, b: 4})).toPrettyPrintTo(\n      'Immutable.ABRecord {\\n  \"a\": 3,\\n  \"b\": 4,\\n}',\n    );\n  });\n\n  it('supports a record with Map value {min: true}', () => {\n    const ABRecord = Immutable.Record(\n      {a: Immutable.Map({c: 1}), b: 2},\n      'ABRecord',\n    );\n\n    expect(ABRecord()).toPrettyPrintTo(\n      'Immutable.ABRecord {\"a\": Immutable.Map {\"c\": 1}, \"b\": 2}',\n      {\n        min: true,\n      },\n    );\n  });\n\n  it('supports a record with Map value {min: false}', () => {\n    const ABRecord = Immutable.Record(\n      {a: Immutable.Map({c: 1}), b: 2},\n      'ABRecord',\n    );\n\n    expect(ABRecord()).toPrettyPrintTo(\n      'Immutable.ABRecord {\\n  \"a\": Immutable.Map {\\n    \"c\": 1,\\n  },\\n  \"b\": 2,\\n}',\n    );\n  });\n\n  it('supports imbricated Record {min: true}', () => {\n    const CDRecord = Immutable.Record({c: 3, d: 4}, 'CDRecord');\n    const ABRecord = Immutable.Record({a: CDRecord(), b: 2}, 'ABRecord');\n\n    expect(ABRecord()).toPrettyPrintTo(\n      'Immutable.ABRecord {\"a\": Immutable.CDRecord {\"c\": 3, \"d\": 4}, \"b\": 2}',\n      {min: true},\n    );\n  });\n\n  it('supports imbricated Record {min: false}', () => {\n    const CDRecord = Immutable.Record({c: 3, d: 4}, 'CDRecord');\n    const ABRecord = Immutable.Record({a: CDRecord(), b: 2}, 'ABRecord');\n\n    expect(ABRecord()).toPrettyPrintTo(\n      'Immutable.ABRecord {\\n  \"a\": Immutable.CDRecord {\\n    \"c\": 3,\\n    \"d\": 4,\\n  },\\n  \"b\": 2,\\n}',\n    );\n  });\n});\n\ndescribe('indentation of heterogeneous collections', () => {\n  // Don’t interpret tests that pretty-format and plugins are compatible\n  // as recommendation to compose immutable and non-immutable collections.\n  test('empty Immutable.List as child of Object', () => {\n    const val = {\n      filter: 'all',\n      todos: Immutable.List([]),\n    };\n    expect(val).toPrettyPrintTo(\n      [\n        'Object {',\n        '  \"filter\": \"all\",',\n        '  \"todos\": Immutable.List [],',\n        '}',\n      ].join('\\n'),\n    );\n  });\n  test('empty Immutable.Map as child of Array', () => {\n    const val = [Immutable.Map({})];\n    expect(val).toPrettyPrintTo(\n      ['Array [', '  Immutable.Map {},', ']'].join('\\n'),\n    );\n  });\n\n  test('non-empty Array as child of Immutable.Map', () => {\n    const val = Immutable.Map({\n      filter: 'completed',\n      todos: [\n        Immutable.Map({\n          completed: true,\n          text: 'Replace print with serialize',\n        }),\n      ],\n    });\n    expect(val).toPrettyPrintTo(\n      [\n        'Immutable.Map {',\n        '  \"filter\": \"completed\",',\n        '  \"todos\": Array [',\n        '    Immutable.Map {',\n        '      \"completed\": true,',\n        '      \"text\": \"Replace print with serialize\",',\n        '    },',\n        '  ],',\n        '}',\n      ].join('\\n'),\n    );\n  });\n  test('non-empty Object as child of Immutable.List', () => {\n    const val = Immutable.List([\n      {\n        completed: true,\n        text: 'Replace print with serialize',\n      },\n    ]);\n    expect(val).toPrettyPrintTo(\n      [\n        'Immutable.List [',\n        '  Object {',\n        '    \"completed\": true,',\n        '    \"text\": \"Replace print with serialize\",',\n        '  },',\n        ']',\n      ].join('\\n'),\n    );\n  });\n});\n\ndescribe('indent option', () => {\n  const val = Immutable.Map({\n    filter: 'completed',\n    todos: Immutable.List([\n      Immutable.Map({\n        completed: true,\n        text: 'Replace print with serialize',\n      }),\n      Immutable.Map({\n        completed: false,\n        text: 'Return if depth exceeds max',\n      }),\n    ]),\n  });\n  const expected = [\n    'Immutable.Map {',\n    '  \"filter\": \"completed\",',\n    '  \"todos\": Immutable.List [',\n    '    Immutable.Map {',\n    '      \"completed\": true,',\n    '      \"text\": \"Replace print with serialize\",',\n    '    },',\n    '    Immutable.Map {',\n    '      \"completed\": false,',\n    '      \"text\": \"Return if depth exceeds max\",',\n    '    },',\n    '  ],',\n    '}',\n  ].join('\\n');\n  test('default implicit: 2 spaces', () => {\n    expect(val).toPrettyPrintTo(expected);\n  });\n  test('default explicit: 2 spaces', () => {\n    expect(val).toPrettyPrintTo(expected, {indent: 2});\n  });\n\n  // Tests assume that no strings in val contain multiple adjacent spaces!\n  test('non-default: 0 spaces', () => {\n    const indent = 0;\n    expect(val).toPrettyPrintTo(expected.replace(/ {2}/g, ' '.repeat(indent)), {\n      indent,\n    });\n  });\n  test('non-default: 4 spaces', () => {\n    const indent = 4;\n    expect(val).toPrettyPrintTo(expected.replace(/ {2}/g, ' '.repeat(indent)), {\n      indent,\n    });\n  });\n});\n\ndescribe('maxDepth option', () => {\n  // Don’t interpret tests that pretty-format and plugins are compatible\n  // as recommendation to compose immutable and non-immutable collections.\n  test('Immutable.List as child of Object', () => {\n    const val = {\n      // ++depth === 1\n      filter: 'all',\n      todos: Immutable.List([\n        Immutable.Map({\n          completed: true,\n          text: 'Return if depth exceeds max',\n        }),\n      ]),\n    };\n    const expected = [\n      'Object {',\n      '  \"filter\": \"all\",',\n      '  \"todos\": [Immutable.List],',\n      '}',\n    ].join('\\n');\n    expect(val).toPrettyPrintTo(expected, {maxDepth: 1});\n  });\n  test('Immutable.Map as child of Array', () => {\n    const val = [\n      // ++depth === 1\n      Immutable.Map({\n        completed: false,\n        text: 'Return if depth exceeds max',\n      }),\n    ];\n    const expected = ['Array [', '  [Immutable.Map],', ']'].join('\\n');\n    expect(val).toPrettyPrintTo(expected, {maxDepth: 1});\n  });\n\n  test('Immutable.Seq as child of Immutable.Map', () => {\n    const val = {\n      // ++depth === 1\n      filter: 'all',\n      todos: Immutable.Seq(\n        Immutable.List([\n          Immutable.Map({\n            completed: true,\n            text: 'Return if depth exceeds max',\n          }),\n        ]),\n      ),\n    };\n    const expected = [\n      'Object {',\n      '  \"filter\": \"all\",',\n      '  \"todos\": [Immutable.Seq],',\n      '}',\n    ].join('\\n');\n    expect(val).toPrettyPrintTo(expected, {maxDepth: 1});\n  });\n  test('Immutable.Map as descendants in immutable collection', () => {\n    const val = Immutable.Map({\n      // ++depth === 1\n      filter: 'uncompleted',\n      todos: Immutable.List([\n        // ++depth === 2\n        Immutable.Map({\n          // ++depth === 3\n          completed: true,\n          text: 'Replace print with serialize',\n        }),\n        Immutable.Map({\n          // ++depth === 3\n          completed: true,\n          text: 'Return if depth exceeds max',\n        }),\n      ]),\n    });\n    const expected = [\n      'Immutable.Map {',\n      '  \"filter\": \"uncompleted\",',\n      '  \"todos\": Immutable.List [',\n      '    [Immutable.Map],',\n      '    [Immutable.Map],',\n      '  ],',\n      '}',\n    ].join('\\n');\n    expect(val).toPrettyPrintTo(expected, {maxDepth: 2});\n  });\n});\n\ndescribe('Immutable.Seq', () => {\n  it('supports an empty sequence from array {min: true}', () => {\n    expect(Immutable.Seq([])).toPrettyPrintTo('Immutable.Seq []', {min: true});\n  });\n  it('supports an empty sequence from array {min: false}', () => {\n    expect(Immutable.Seq([])).toPrettyPrintTo('Immutable.Seq []', {min: false});\n  });\n  it('supports a non-empty sequence from array {min: true}', () => {\n    expect(Immutable.Seq([0, 1, 2])).toPrettyPrintTo(\n      'Immutable.Seq [0, 1, 2]',\n      {min: true},\n    );\n  });\n  it('supports a non-empty sequence from array {min: false}', () => {\n    expect(Immutable.Seq([0, 1, 2])).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n      {min: false},\n    );\n  });\n\n  it('supports a non-empty sequence from arguments', () => {\n    function returnArguments(..._args: Array<any>) {\n      return arguments;\n    }\n    expect(Immutable.Seq(returnArguments(0, 1, 2))).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n    );\n  });\n\n  it('supports an empty sequence from object {min: true}', () => {\n    expect(Immutable.Seq({})).toPrettyPrintTo('Immutable.Seq {}', {min: true});\n  });\n  it('supports an empty sequence from object {min: false}', () => {\n    expect(Immutable.Seq({})).toPrettyPrintTo('Immutable.Seq {}', {min: false});\n  });\n  it('supports a non-empty sequence from object {min: true}', () => {\n    expect(Immutable.Seq({key: 'value'})).toPrettyPrintTo(\n      'Immutable.Seq {\"key\": \"value\"}',\n      {\n        min: true,\n      },\n    );\n  });\n  it('supports a non-empty sequence from object {min: false}', () => {\n    expect(Immutable.Seq({key: 'value'})).toPrettyPrintTo(\n      'Immutable.Seq {\\n  \"key\": \"value\",\\n}',\n      {\n        min: false,\n      },\n    );\n  });\n\n  it('supports a sequence of entries from Immutable.Map', () => {\n    expect(Immutable.Seq(Immutable.Map({key: 'value'}))).toPrettyPrintTo(\n      'Immutable.Seq {\\n  \"key\": \"value\",\\n}',\n    );\n  });\n\n  it('supports a sequence of values from ECMAScript Set', () => {\n    expect(Immutable.Seq(new Set([0, 1, 2]))).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n    );\n  });\n  it('supports a sequence of values from Immutable.List', () => {\n    expect(Immutable.Seq(Immutable.List([0, 1, 2]))).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n    );\n  });\n  it('supports a sequence of values from Immutable.Set', () => {\n    expect(Immutable.Seq(Immutable.Set([0, 1, 2]))).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n    );\n  });\n  it('supports a sequence of values from Immutable.Stack', () => {\n    expect(Immutable.Seq(Immutable.Stack([0, 1, 2]))).toPrettyPrintTo(\n      'Immutable.Seq [\\n  0,\\n  1,\\n  2,\\n]',\n    );\n  });\n});\n\ndescribe('Immutable.Seq lazy entries', () => {\n  const expected = 'Immutable.Seq {…}';\n  const object = {key0: '', key1: '1'};\n  const filterer = (value: string) => value.length !== 0;\n\n  // undefined size confirms correct criteria for lazy Seq\n  test('from object properties', () => {\n    const val = Immutable.Seq(object).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n  test('from Immutable.Map entries', () => {\n    const val = Immutable.Seq(Immutable.Map(object)).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n});\n\ndescribe('Immutable.Seq lazy values', () => {\n  const expected = 'Immutable.Seq […]';\n  const array = ['', '1', '22'];\n  const filterer = (item: string) => item.length !== 0;\n\n  test('from Immutable.Range', () => {\n    const val = Immutable.Range(1, Infinity);\n    expect(val.size).toBe(Infinity);\n    expect(val).toPrettyPrintTo(expected);\n  });\n\n  // undefined size confirms correct criteria for lazy Seq\n  test('from iterator', () => {\n    function returnIterator<T>(values: Array<T>): IterableIterator<T> {\n      let i = 0;\n      return {\n        next() {\n          return i < values.length\n            ? {done: false, value: values[i++]}\n            : {done: true, value: undefined};\n        },\n        [Symbol.iterator]() {\n          return this;\n        },\n      };\n    }\n    const val = Immutable.Seq(returnIterator(array)).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n  test('from array items', () => {\n    const val = Immutable.Seq(array).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n  test('from Immutable.List values', () => {\n    const val = Immutable.Seq(Immutable.List(array)).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n  test('from ECMAScript Set values', () => {\n    const val = Immutable.Seq(new Set(array)).filter(filterer);\n    expect(val.size).toBeUndefined();\n    expect(val).toPrettyPrintTo(expected);\n  });\n});\n","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/ReactElement.test.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/__tests__/prettyFormat.test.ts",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],["135","136","137","138","139","140","141","142","143"],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/prefer-rest-params-eventually */\n\nimport prettyFormat, {PrettyFormatOptions} from '../';\n\nfunction returnArguments(..._args: Array<unknown>) {\n  return arguments;\n}\n\nclass MyArray<T> extends Array<T> {}\n\nfunction MyObject(value: unknown) {\n  // @ts-expect-error\n  this.name = value;\n}\n\ndescribe('prettyFormat()', () => {\n  it('prints empty arguments', () => {\n    const val = returnArguments();\n    expect(prettyFormat(val)).toBe('Arguments []');\n  });\n\n  it('prints arguments', () => {\n    const val = returnArguments(1, 2, 3);\n    expect(prettyFormat(val)).toBe('Arguments [\\n  1,\\n  2,\\n  3,\\n]');\n  });\n\n  it('prints an empty array', () => {\n    const val: Array<never> = [];\n    expect(prettyFormat(val)).toBe('Array []');\n  });\n\n  it('prints an array with items', () => {\n    const val = [1, 2, 3];\n    expect(prettyFormat(val)).toBe('Array [\\n  1,\\n  2,\\n  3,\\n]');\n  });\n\n  it('prints a sparse array with only holes', () => {\n    // eslint-disable-next-line no-sparse-arrays\n    const val = [, , ,];\n    expect(prettyFormat(val)).toBe('Array [\\n  ,\\n  ,\\n  ,\\n]');\n  });\n\n  it('prints a sparse array with items', () => {\n    // eslint-disable-next-line no-sparse-arrays\n    const val = [1, , , 4];\n    expect(prettyFormat(val)).toBe('Array [\\n  1,\\n  ,\\n  ,\\n  4,\\n]');\n  });\n\n  it('prints a sparse array with value surrounded by holes', () => {\n    // eslint-disable-next-line no-sparse-arrays\n    const val = [, 5, ,];\n    expect(prettyFormat(val)).toBe('Array [\\n  ,\\n  5,\\n  ,\\n]');\n  });\n\n  it('prints a sparse array also containing undefined values', () => {\n    // eslint-disable-next-line no-sparse-arrays\n    const val = [1, , undefined, undefined, , 4];\n    expect(prettyFormat(val)).toBe(\n      'Array [\\n  1,\\n  ,\\n  undefined,\\n  undefined,\\n  ,\\n  4,\\n]',\n    );\n  });\n\n  it('prints a empty typed array', () => {\n    const val = new Uint32Array(0);\n    expect(prettyFormat(val)).toBe('Uint32Array []');\n  });\n\n  it('prints a typed array with items', () => {\n    const val = new Uint32Array(3);\n    expect(prettyFormat(val)).toBe('Uint32Array [\\n  0,\\n  0,\\n  0,\\n]');\n  });\n\n  it('prints an array buffer', () => {\n    const val = new ArrayBuffer(3);\n    expect(prettyFormat(val)).toBe('ArrayBuffer []');\n  });\n\n  it('prints a nested array', () => {\n    const val = [[1, 2, 3]];\n    expect(prettyFormat(val)).toBe(\n      'Array [\\n  Array [\\n    1,\\n    2,\\n    3,\\n  ],\\n]',\n    );\n  });\n\n  it('prints true', () => {\n    const val = true;\n    expect(prettyFormat(val)).toBe('true');\n  });\n\n  it('prints false', () => {\n    const val = false;\n    expect(prettyFormat(val)).toBe('false');\n  });\n\n  it('prints an error', () => {\n    const val = new Error();\n    expect(prettyFormat(val)).toBe('[Error]');\n  });\n\n  it('prints a typed error with a message', () => {\n    const val = new TypeError('message');\n    expect(prettyFormat(val)).toBe('[TypeError: message]');\n  });\n\n  it('prints a function constructor', () => {\n    /* eslint-disable no-new-func */\n    const val = new Function();\n    /* eslint-enable no-new-func */\n    // In Node >=8.1.4: val.name === 'anonymous'\n    expect(prettyFormat(val)).toBe('[Function anonymous]');\n  });\n\n  it('prints an anonymous callback function', () => {\n    let val;\n    function f(cb: () => void) {\n      val = cb;\n    }\n    f(() => {});\n    // In Node >=8.1.4: val.name === ''\n    expect(prettyFormat(val)).toBe('[Function anonymous]');\n  });\n\n  it('prints an anonymous assigned function', () => {\n    const val = () => {};\n    const formatted = prettyFormat(val);\n    // Node 6.5 infers function names\n    expect(\n      formatted === '[Function anonymous]' || formatted === '[Function val]',\n    ).toBeTruthy();\n  });\n\n  it('prints a named function', () => {\n    const val = function named() {};\n    expect(prettyFormat(val)).toBe('[Function named]');\n  });\n\n  it('prints a named generator function', () => {\n    const val = function* generate() {\n      yield 1;\n      yield 2;\n      yield 3;\n    };\n    expect(prettyFormat(val)).toBe('[Function generate]');\n  });\n\n  it('can customize function names', () => {\n    const val = function named() {};\n    expect(\n      prettyFormat(val, {\n        printFunctionName: false,\n      }),\n    ).toBe('[Function]');\n  });\n\n  it('prints Infinity', () => {\n    const val = Infinity;\n    expect(prettyFormat(val)).toBe('Infinity');\n  });\n\n  it('prints -Infinity', () => {\n    const val = -Infinity;\n    expect(prettyFormat(val)).toBe('-Infinity');\n  });\n\n  it('prints an empty map', () => {\n    const val = new Map();\n    expect(prettyFormat(val)).toBe('Map {}');\n  });\n\n  it('prints a map with values', () => {\n    const val = new Map();\n    val.set('prop1', 'value1');\n    val.set('prop2', 'value2');\n    expect(prettyFormat(val)).toBe(\n      'Map {\\n  \"prop1\" => \"value1\",\\n  \"prop2\" => \"value2\",\\n}',\n    );\n  });\n\n  it('prints a map with non-string keys', () => {\n    const val = new Map<unknown, unknown>([\n      [false, 'boolean'],\n      ['false', 'string'],\n      [0, 'number'],\n      ['0', 'string'],\n      [null, 'null'],\n      ['null', 'string'],\n      [undefined, 'undefined'],\n      ['undefined', 'string'],\n      [Symbol('description'), 'symbol'],\n      ['Symbol(description)', 'string'],\n      [['array', 'key'], 'array'],\n      [{key: 'value'}, 'object'],\n    ]);\n    const expected = [\n      'Map {',\n      '  false => \"boolean\",',\n      '  \"false\" => \"string\",',\n      '  0 => \"number\",',\n      '  \"0\" => \"string\",',\n      '  null => \"null\",',\n      '  \"null\" => \"string\",',\n      '  undefined => \"undefined\",',\n      '  \"undefined\" => \"string\",',\n      '  Symbol(description) => \"symbol\",',\n      '  \"Symbol(description)\" => \"string\",',\n      '  Array [',\n      '    \"array\",',\n      '    \"key\",',\n      '  ] => \"array\",',\n      '  Object {',\n      '    \"key\": \"value\",',\n      '  } => \"object\",',\n      '}',\n    ].join('\\n');\n    expect(prettyFormat(val)).toEqual(expected);\n  });\n\n  it('prints NaN', () => {\n    const val = NaN;\n    expect(prettyFormat(val)).toBe('NaN');\n  });\n\n  it('prints null', () => {\n    const val = null;\n    expect(prettyFormat(val)).toBe('null');\n  });\n\n  it('prints a positive number', () => {\n    const val = 123;\n    expect(prettyFormat(val)).toBe('123');\n  });\n\n  it('prints a negative number', () => {\n    const val = -123;\n    expect(prettyFormat(val)).toBe('-123');\n  });\n\n  it('prints zero', () => {\n    const val = 0;\n    expect(prettyFormat(val)).toBe('0');\n  });\n\n  it('prints negative zero', () => {\n    const val = -0;\n    expect(prettyFormat(val)).toBe('-0');\n  });\n\n  it('prints a positive bigint', () => {\n    const val = BigInt(123);\n    expect(prettyFormat(val)).toBe('123n');\n  });\n\n  it('prints a negative bigint', () => {\n    const val = BigInt(-123);\n    expect(prettyFormat(val)).toBe('-123n');\n  });\n\n  it('prints zero bigint', () => {\n    const val = BigInt(0);\n    expect(prettyFormat(val)).toBe('0n');\n  });\n\n  it('prints negative zero bigint', () => {\n    const val = BigInt(-0);\n    expect(prettyFormat(val)).toBe('0n');\n  });\n\n  it('prints a date', () => {\n    const val = new Date(10e11);\n    expect(prettyFormat(val)).toBe('2001-09-09T01:46:40.000Z');\n  });\n\n  it('prints an invalid date', () => {\n    const val = new Date(Infinity);\n    expect(prettyFormat(val)).toBe('Date { NaN }');\n  });\n\n  it('prints an empty object', () => {\n    const val = {};\n    expect(prettyFormat(val)).toBe('Object {}');\n  });\n\n  it('prints an object with properties', () => {\n    const val = {prop1: 'value1', prop2: 'value2'};\n    expect(prettyFormat(val)).toBe(\n      'Object {\\n  \"prop1\": \"value1\",\\n  \"prop2\": \"value2\",\\n}',\n    );\n  });\n\n  it('prints an object with properties and symbols', () => {\n    const val: any = {};\n    val[Symbol('symbol1')] = 'value2';\n    val[Symbol('symbol2')] = 'value3';\n    val.prop = 'value1';\n    expect(prettyFormat(val)).toBe(\n      'Object {\\n  \"prop\": \"value1\",\\n  Symbol(symbol1): \"value2\",\\n  Symbol(symbol2): \"value3\",\\n}',\n    );\n  });\n\n  it('prints an object without non-enumerable properties which have string key', () => {\n    const val: unknown = {\n      enumerable: true,\n    };\n    const key = 'non-enumerable';\n    Object.defineProperty(val, key, {\n      enumerable: false,\n      value: false,\n    });\n    expect(prettyFormat(val)).toBe('Object {\\n  \"enumerable\": true,\\n}');\n  });\n\n  it('prints an object without non-enumerable properties which have symbol key', () => {\n    const val: unknown = {\n      enumerable: true,\n    };\n    const key = Symbol('non-enumerable');\n    Object.defineProperty(val, key, {\n      enumerable: false,\n      value: false,\n    });\n    expect(prettyFormat(val)).toBe('Object {\\n  \"enumerable\": true,\\n}');\n  });\n\n  it('prints an object with sorted properties', () => {\n    // eslint-disable-next-line sort-keys\n    const val = {b: 1, a: 2};\n    expect(prettyFormat(val)).toBe('Object {\\n  \"a\": 2,\\n  \"b\": 1,\\n}');\n  });\n\n  it('prints an object with keys in their original order with the appropriate comparing function', () => {\n    // eslint-disable-next-line sort-keys\n    const val = {b: 1, a: 2};\n    const compareKeys = () => 0;\n    expect(prettyFormat(val, {compareKeys})).toBe(\n      'Object {\\n  \"b\": 1,\\n  \"a\": 2,\\n}',\n    );\n  });\n\n  it('prints an object with keys in their original order with compareKeys set to null', () => {\n    // eslint-disable-next-line sort-keys\n    const val = {b: 1, a: 2};\n    expect(prettyFormat(val, {compareKeys: null})).toBe(\n      'Object {\\n  \"b\": 1,\\n  \"a\": 2,\\n}',\n    );\n  });\n\n  it('prints an object with keys sorted in reverse order', () => {\n    const val = {a: 1, b: 2};\n    const compareKeys = (a: string, b: string) => (a > b ? -1 : 1);\n    expect(prettyFormat(val, {compareKeys})).toBe(\n      'Object {\\n  \"b\": 2,\\n  \"a\": 1,\\n}',\n    );\n  });\n\n  it('prints regular expressions from constructors', () => {\n    const val = new RegExp('regexp');\n    expect(prettyFormat(val)).toBe('/regexp/');\n  });\n\n  it('prints regular expressions from literals', () => {\n    const val = /regexp/gi;\n    expect(prettyFormat(val)).toBe('/regexp/gi');\n  });\n\n  it('prints regular expressions {escapeRegex: false}', () => {\n    const val = /regexp\\d/gi;\n    expect(prettyFormat(val)).toBe('/regexp\\\\d/gi');\n  });\n\n  it('prints regular expressions {escapeRegex: true}', () => {\n    const val = /regexp\\d/gi;\n    expect(prettyFormat(val, {escapeRegex: true})).toBe('/regexp\\\\\\\\d/gi');\n  });\n\n  it('escapes regular expressions nested inside object', () => {\n    const obj = {test: /regexp\\d/gi};\n    expect(prettyFormat(obj, {escapeRegex: true})).toBe(\n      'Object {\\n  \"test\": /regexp\\\\\\\\d/gi,\\n}',\n    );\n  });\n\n  it('prints an empty set', () => {\n    const val = new Set();\n    expect(prettyFormat(val)).toBe('Set {}');\n  });\n\n  it('prints a set with values', () => {\n    const val = new Set();\n    val.add('value1');\n    val.add('value2');\n    expect(prettyFormat(val)).toBe('Set {\\n  \"value1\",\\n  \"value2\",\\n}');\n  });\n\n  it('prints a string', () => {\n    const val = 'string';\n    expect(prettyFormat(val)).toBe('\"string\"');\n  });\n\n  it('prints and escape a string', () => {\n    const val = '\"\\'\\\\';\n    expect(prettyFormat(val)).toBe('\"\\\\\"\\'\\\\\\\\\"');\n  });\n\n  it(\"doesn't escape string with {escapeString: false}\", () => {\n    const val = '\"\\'\\\\n';\n    expect(prettyFormat(val, {escapeString: false})).toBe('\"\"\\'\\\\n\"');\n  });\n\n  it('prints a string with escapes', () => {\n    expect(prettyFormat('\"-\"')).toBe('\"\\\\\"-\\\\\"\"');\n    expect(prettyFormat('\\\\ \\\\\\\\')).toBe('\"\\\\\\\\ \\\\\\\\\\\\\\\\\"');\n  });\n\n  it('prints a multiline string', () => {\n    const val = ['line 1', 'line 2', 'line 3'].join('\\n');\n    expect(prettyFormat(val)).toBe(`\"${val}\"`);\n  });\n\n  it('prints a multiline string as value of object property', () => {\n    const polyline = {\n      props: {\n        id: 'J',\n        points: ['0.5,0.460', '0.5,0.875', '0.25,0.875'].join('\\n'),\n      },\n      type: 'polyline',\n    };\n    const val = {\n      props: {\n        children: polyline,\n      },\n      type: 'svg',\n    };\n    expect(prettyFormat(val)).toEqual(\n      [\n        'Object {',\n        '  \"props\": Object {',\n        '    \"children\": Object {',\n        '      \"props\": Object {',\n        '        \"id\": \"J\",',\n        '        \"points\": \"0.5,0.460',\n        '0.5,0.875',\n        '0.25,0.875\",',\n        '      },',\n        '      \"type\": \"polyline\",',\n        '    },',\n        '  },',\n        '  \"type\": \"svg\",',\n        '}',\n      ].join('\\n'),\n    );\n  });\n\n  it('prints a symbol', () => {\n    const val = Symbol('symbol');\n    expect(prettyFormat(val)).toBe('Symbol(symbol)');\n  });\n\n  it('prints undefined', () => {\n    const val = undefined;\n    expect(prettyFormat(val)).toBe('undefined');\n  });\n\n  it('prints a WeakMap', () => {\n    const val = new WeakMap();\n    expect(prettyFormat(val)).toBe('WeakMap {}');\n  });\n\n  it('prints a WeakSet', () => {\n    const val = new WeakSet();\n    expect(prettyFormat(val)).toBe('WeakSet {}');\n  });\n\n  it('prints deeply nested objects', () => {\n    const val = {prop: {prop: {prop: 'value'}}};\n    expect(prettyFormat(val)).toBe(\n      'Object {\\n  \"prop\": Object {\\n    \"prop\": Object {\\n      \"prop\": \"value\",\\n    },\\n  },\\n}',\n    );\n  });\n\n  it('prints circular references', () => {\n    const val: any = {};\n    val.prop = val;\n    expect(prettyFormat(val)).toBe('Object {\\n  \"prop\": [Circular],\\n}');\n  });\n\n  it('prints parallel references', () => {\n    const inner = {};\n    const val = {prop1: inner, prop2: inner};\n    expect(prettyFormat(val)).toBe(\n      'Object {\\n  \"prop1\": Object {},\\n  \"prop2\": Object {},\\n}',\n    );\n  });\n\n  describe('indent option', () => {\n    const val = [\n      {\n        id: '8658c1d0-9eda-4a90-95e1-8001e8eb6036',\n        text: 'Add alternative serialize API for pretty-format plugins',\n        type: 'ADD_TODO',\n      },\n      {\n        id: '8658c1d0-9eda-4a90-95e1-8001e8eb6036',\n        type: 'TOGGLE_TODO',\n      },\n    ];\n    const expected = [\n      'Array [',\n      '  Object {',\n      '    \"id\": \"8658c1d0-9eda-4a90-95e1-8001e8eb6036\",',\n      '    \"text\": \"Add alternative serialize API for pretty-format plugins\",',\n      '    \"type\": \"ADD_TODO\",',\n      '  },',\n      '  Object {',\n      '    \"id\": \"8658c1d0-9eda-4a90-95e1-8001e8eb6036\",',\n      '    \"type\": \"TOGGLE_TODO\",',\n      '  },',\n      ']',\n    ].join('\\n');\n    test('default implicit: 2 spaces', () => {\n      expect(prettyFormat(val)).toEqual(expected);\n    });\n    test('default explicit: 2 spaces', () => {\n      expect(prettyFormat(val, {indent: 2})).toEqual(expected);\n    });\n\n    // Tests assume that no strings in val contain multiple adjacent spaces!\n    test('non-default: 0 spaces', () => {\n      const indent = 0;\n      expect(prettyFormat(val, {indent})).toEqual(\n        expected.replace(/ {2}/g, ' '.repeat(indent)),\n      );\n    });\n    test('non-default: 4 spaces', () => {\n      const indent = 4;\n      expect(prettyFormat(val, {indent})).toEqual(\n        expected.replace(/ {2}/g, ' '.repeat(indent)),\n      );\n    });\n  });\n\n  it('can omit basic prototypes', () => {\n    const val = {\n      deeply: {nested: {object: {}}},\n      'empty array': {},\n      'empty object': {},\n      'nested array': [[[]]],\n      'typed array': new Uint8Array(),\n    };\n    expect(prettyFormat(val, {maxDepth: 2, printBasicPrototype: false})).toBe(\n      [\n        '{',\n        '  \"deeply\": {',\n        '    \"nested\": [Object],',\n        '  },',\n        '  \"empty array\": {},',\n        '  \"empty object\": {},',\n        '  \"nested array\": [',\n        '    [Array],',\n        '  ],',\n        '  \"typed array\": Uint8Array [],',\n        '}',\n      ].join('\\n'),\n    );\n  });\n\n  describe('maxWidth option', () => {\n    it('applies to arrays', () => {\n      const val = Array(1_000_000).fill('x');\n      expect(prettyFormat(val, {maxWidth: 5})).toEqual(\n        [\n          'Array [',\n          '  \"x\",',\n          '  \"x\",',\n          '  \"x\",',\n          '  \"x\",',\n          '  \"x\",',\n          '  …',\n          ']',\n        ].join('\\n'),\n      );\n    });\n\n    it('applies to sets', () => {\n      const val = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]);\n      expect(prettyFormat(val, {maxWidth: 5})).toEqual(\n        ['Set {', '  1,', '  2,', '  3,', '  4,', '  5,', '  …', '}'].join(\n          '\\n',\n        ),\n      );\n    });\n\n    it('applies to maps', () => {\n      const val = new Map();\n      val.set('a', 1);\n      val.set('b', 2);\n      val.set('c', 3);\n      val.set('d', 4);\n      val.set('e', 5);\n      val.set('f', 6);\n      val.set('g', 7);\n      val.set('h', 8);\n      val.set('i', 9);\n      val.set('j', 10);\n      expect(prettyFormat(val, {maxWidth: 5})).toEqual(\n        [\n          'Map {',\n          '  \"a\" => 1,',\n          '  \"b\" => 2,',\n          '  \"c\" => 3,',\n          '  \"d\" => 4,',\n          '  \"e\" => 5,',\n          '  …',\n          '}',\n        ].join('\\n'),\n      );\n    });\n  });\n\n  it('can customize the max depth', () => {\n    const val = [\n      {\n        'arguments empty': returnArguments(),\n        'arguments non-empty': returnArguments('arg'),\n        'array literal empty': [],\n        'array literal non-empty': ['item'],\n        'extended array empty': new MyArray(),\n        'map empty': new Map(),\n        'map non-empty': new Map([['name', 'value']]),\n        'object literal empty': {},\n        'object literal non-empty': {name: 'value'},\n        // @ts-expect-error\n        'object with constructor': new MyObject('value'),\n        'object without constructor': Object.create(null),\n        'set empty': new Set(),\n        'set non-empty': new Set(['value']),\n      },\n    ];\n    expect(prettyFormat(val, {maxDepth: 2})).toEqual(\n      [\n        'Array [',\n        '  Object {',\n        '    \"arguments empty\": [Arguments],',\n        '    \"arguments non-empty\": [Arguments],',\n        '    \"array literal empty\": [Array],',\n        '    \"array literal non-empty\": [Array],',\n        '    \"extended array empty\": [MyArray],',\n        '    \"map empty\": [Map],',\n        '    \"map non-empty\": [Map],',\n        '    \"object literal empty\": [Object],',\n        '    \"object literal non-empty\": [Object],',\n        '    \"object with constructor\": [MyObject],',\n        '    \"object without constructor\": [Object],',\n        '    \"set empty\": [Set],',\n        '    \"set non-empty\": [Set],',\n        '  },',\n        ']',\n      ].join('\\n'),\n    );\n  });\n\n  it('throws on invalid options', () => {\n    expect(() => {\n      // @ts-expect-error: Testing runtime error\n      prettyFormat({}, {invalidOption: true});\n    }).toThrow('Unknown option \"invalidOption\".');\n  });\n\n  it('supports plugins', () => {\n    class Foo {}\n\n    expect(\n      prettyFormat(new Foo(), {\n        plugins: [\n          {\n            print: () => 'class Foo',\n            test(object) {\n              return object.constructor.name === 'Foo';\n            },\n          },\n        ],\n      }),\n    ).toBe('class Foo');\n  });\n\n  it('supports plugins that return empty string', () => {\n    const val = {\n      payload: '',\n    };\n    const options = {\n      plugins: [\n        {\n          print(val: any) {\n            return val.payload;\n          },\n          test(val: any) {\n            return val && typeof val.payload === 'string';\n          },\n        },\n      ],\n    };\n    expect(prettyFormat(val, options)).toBe('');\n  });\n\n  it('throws if plugin does not return a string', () => {\n    const val = 123;\n    const options: PrettyFormatOptions = {\n      plugins: [\n        {\n          // @ts-expect-error: Testing runtime error\n          print(val: unknown) {\n            return val;\n          },\n          test() {\n            return true;\n          },\n        },\n      ],\n    };\n    expect(() => {\n      prettyFormat(val, options);\n    }).toThrow(\n      'Plugin must return type \"string\" but instead returned \"number\".',\n    );\n  });\n\n  it('throws PrettyFormatPluginError if test throws an error', () => {\n    expect.hasAssertions();\n    const options = {\n      plugins: [\n        {\n          print: () => '',\n          test() {\n            throw new Error('Where is the error?');\n          },\n        },\n      ],\n    };\n\n    try {\n      prettyFormat('', options);\n    } catch (error: any) {\n      expect(error.name).toBe('PrettyFormatPluginError');\n    }\n  });\n\n  it('throws PrettyFormatPluginError if print throws an error', () => {\n    expect.hasAssertions();\n    const options = {\n      plugins: [\n        {\n          print: () => {\n            throw new Error('Where is the error?');\n          },\n          test: () => true,\n        },\n      ],\n    };\n\n    try {\n      prettyFormat('', options);\n    } catch (error: any) {\n      expect(error.name).toBe('PrettyFormatPluginError');\n    }\n  });\n\n  it('throws PrettyFormatPluginError if serialize throws an error', () => {\n    expect.hasAssertions();\n    const options = {\n      plugins: [\n        {\n          serialize: () => {\n            throw new Error('Where is the error?');\n          },\n          test: () => true,\n        },\n      ],\n    };\n\n    try {\n      prettyFormat('', options);\n    } catch (error: any) {\n      expect(error.name).toBe('PrettyFormatPluginError');\n    }\n  });\n\n  it('supports plugins with deeply nested arrays (#24)', () => {\n    const val = [\n      [1, 2],\n      [3, 4],\n    ];\n    expect(\n      prettyFormat(val, {\n        plugins: [\n          {\n            print(val: unknown, print: any) {\n              return (val as Array<unknown>)\n                .map(item => print(item))\n                .join(' - ');\n            },\n            test(val: unknown) {\n              return Array.isArray(val);\n            },\n          },\n        ],\n      }),\n    ).toBe('1 - 2 - 3 - 4');\n  });\n\n  it('should call plugins on nested basic values', () => {\n    const val = {prop: 42};\n    expect(\n      prettyFormat(val, {\n        plugins: [\n          {\n            print(_val, _print) {\n              return '[called]';\n            },\n            test(val) {\n              return typeof val === 'string' || typeof val === 'number';\n            },\n          },\n        ],\n      }),\n    ).toBe('Object {\\n  [called]: [called],\\n}');\n  });\n\n  it('prints objects with no constructor', () => {\n    expect(prettyFormat(Object.create(null))).toBe('Object {}');\n  });\n\n  it('prints identity-obj-proxy with string constructor', () => {\n    const val = Object.create(null);\n    val.constructor = 'constructor'; // mock the mock object :)\n    const expected = [\n      'Object {', // Object instead of undefined\n      '  \"constructor\": \"constructor\",',\n      '}',\n    ].join('\\n');\n    expect(prettyFormat(val)).toEqual(expected);\n  });\n\n  it('calls toJSON and prints its return value', () => {\n    expect(\n      prettyFormat({\n        toJSON: () => ({value: false}),\n        value: true,\n      }),\n    ).toBe('Object {\\n  \"value\": false,\\n}');\n  });\n\n  it('calls toJSON and prints an internal representation.', () => {\n    expect(\n      prettyFormat({\n        toJSON: () => '[Internal Object]',\n        value: true,\n      }),\n    ).toBe('\"[Internal Object]\"');\n  });\n\n  it('calls toJSON only on functions', () => {\n    expect(\n      prettyFormat({\n        toJSON: false,\n        value: true,\n      }),\n    ).toBe('Object {\\n  \"toJSON\": false,\\n  \"value\": true,\\n}');\n  });\n\n  it('does not call toJSON recursively', () => {\n    expect(\n      prettyFormat({\n        toJSON: () => ({toJSON: () => ({value: true})}),\n        value: false,\n      }),\n    ).toBe('Object {\\n  \"toJSON\": [Function toJSON],\\n}');\n  });\n\n  it('calls toJSON on Sets', () => {\n    const set = new Set([1]);\n    (set as any).toJSON = () => 'map';\n    expect(prettyFormat(set)).toBe('\"map\"');\n  });\n\n  it('disables toJSON calls through options', () => {\n    const value = {apple: 'banana', toJSON: jest.fn(() => '1')};\n    const name = value.toJSON.name || 'anonymous';\n    const set = new Set([value]);\n    (set as any).toJSON = jest.fn(() => 'map');\n    expect(\n      prettyFormat(set, {\n        callToJSON: false,\n      }),\n    ).toBe(\n      `Set {\\n  Object {\\n    \"apple\": \"banana\",\\n    \"toJSON\": [Function ${name}],\\n  },\\n}`,\n    );\n    expect((set as any).toJSON).not.toHaveBeenCalled();\n    expect(value.toJSON).not.toHaveBeenCalled();\n  });\n\n  describe('min', () => {\n    it('prints some basic values in min mode', () => {\n      const val = {\n        boolean: [false, true],\n        null: null,\n        number: [0, -0, 123, -123, Infinity, -Infinity, NaN],\n        string: ['', 'non-empty'],\n        undefined,\n      };\n      expect(\n        prettyFormat(val, {\n          min: true,\n        }),\n      ).toBe(\n        `{${[\n          '\"boolean\": [false, true]',\n          '\"null\": null',\n          '\"number\": [0, -0, 123, -123, Infinity, -Infinity, NaN]',\n          '\"string\": [\"\", \"non-empty\"]',\n          '\"undefined\": undefined',\n        ].join(', ')}}`,\n      );\n    });\n\n    it('prints some complex values in min mode', () => {\n      const val = {\n        'arguments empty': returnArguments(),\n        'arguments non-empty': returnArguments('arg'),\n        'array literal empty': [],\n        'array literal non-empty': ['item'],\n        'extended array empty': new MyArray(),\n        'map empty': new Map(),\n        'map non-empty': new Map([['name', 'value']]),\n        'object literal empty': {},\n        'object literal non-empty': {name: 'value'},\n        // @ts-expect-error\n        'object with constructor': new MyObject('value'),\n        'object without constructor': Object.create(null),\n        'set empty': new Set(),\n        'set non-empty': new Set(['value']),\n      };\n      expect(\n        prettyFormat(val, {\n          min: true,\n        }),\n      ).toBe(\n        `{${[\n          '\"arguments empty\": []',\n          '\"arguments non-empty\": [\"arg\"]',\n          '\"array literal empty\": []',\n          '\"array literal non-empty\": [\"item\"]',\n          '\"extended array empty\": []',\n          '\"map empty\": Map {}',\n          '\"map non-empty\": Map {\"name\" => \"value\"}',\n          '\"object literal empty\": {}',\n          '\"object literal non-empty\": {\"name\": \"value\"}',\n          '\"object with constructor\": {\"name\": \"value\"}',\n          '\"object without constructor\": {}',\n          '\"set empty\": Set {}',\n          '\"set non-empty\": Set {\"value\"}',\n        ].join(', ')}}`,\n      );\n    });\n\n    it('does not allow indent !== 0 in min mode', () => {\n      expect(() => {\n        prettyFormat(1, {indent: 1, min: true});\n      }).toThrow('Options \"min\" and \"indent\" cannot be used together.');\n    });\n  });\n});\n","/Users/simen/repos/jest/packages/pretty-format/src/__tests__/setPrettyPrint.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/collections.ts",["144","145","146","147","148","149","150","151"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {CompareKeys, Config, Printer, Refs} from './types';\n\nconst getKeysOfEnumerableProperties = (\n  object: Record<string, unknown>,\n  compareKeys: CompareKeys,\n) => {\n  const rawKeys = Object.keys(object);\n  const keys: Array<string | symbol> =\n    compareKeys !== null ? rawKeys.sort(compareKeys) : rawKeys;\n\n  if (Object.getOwnPropertySymbols) {\n    Object.getOwnPropertySymbols(object).forEach(symbol => {\n      if (Object.getOwnPropertyDescriptor(object, symbol)!.enumerable) {\n        keys.push(symbol);\n      }\n    });\n  }\n\n  return keys as Array<string>;\n};\n\n/**\n * Return entries (for example, of a map)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nexport function printIteratorEntries(\n  iterator: Iterator<[unknown, unknown]>,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n  // Too bad, so sad that separator for ECMAScript Map has been ' => '\n  // What a distracting diff if you change a data structure to/from\n  // ECMAScript Object or Immutable.Map/OrderedMap which use the default.\n  separator = ': ',\n): string {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n\n  if (!current.done) {\n    result += config.spacingOuter;\n\n    const indentationNext = indentation + config.indent;\n\n    while (!current.done) {\n      result += indentationNext;\n\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n\n      const name = printer(\n        current.value[0],\n        config,\n        indentationNext,\n        depth,\n        refs,\n      );\n      const value = printer(\n        current.value[1],\n        config,\n        indentationNext,\n        depth,\n        refs,\n      );\n\n      result += name + separator + value;\n\n      current = iterator.next();\n\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n\n/**\n * Return values (for example, of a set)\n * with spacing, indentation, and comma\n * without surrounding punctuation (braces or brackets)\n */\nexport function printIteratorValues(\n  iterator: Iterator<unknown>,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n): string {\n  let result = '';\n  let width = 0;\n  let current = iterator.next();\n\n  if (!current.done) {\n    result += config.spacingOuter;\n\n    const indentationNext = indentation + config.indent;\n\n    while (!current.done) {\n      result += indentationNext;\n\n      if (width++ === config.maxWidth) {\n        result += '…';\n        break;\n      }\n\n      result += printer(current.value, config, indentationNext, depth, refs);\n\n      current = iterator.next();\n\n      if (!current.done) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n\n/**\n * Return items (for example, of an array)\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, brackets)\n **/\nexport function printListItems(\n  list: ArrayLike<unknown>,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n): string {\n  let result = '';\n\n  if (list.length) {\n    result += config.spacingOuter;\n\n    const indentationNext = indentation + config.indent;\n\n    for (let i = 0; i < list.length; i++) {\n      result += indentationNext;\n\n      if (i === config.maxWidth) {\n        result += '…';\n        break;\n      }\n\n      if (i in list) {\n        result += printer(list[i], config, indentationNext, depth, refs);\n      }\n\n      if (i < list.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n\n/**\n * Return properties of an object\n * with spacing, indentation, and comma\n * without surrounding punctuation (for example, braces)\n */\nexport function printObjectProperties(\n  val: Record<string, unknown>,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n): string {\n  let result = '';\n  const keys = getKeysOfEnumerableProperties(val, config.compareKeys);\n\n  if (keys.length) {\n    result += config.spacingOuter;\n\n    const indentationNext = indentation + config.indent;\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const name = printer(key, config, indentationNext, depth, refs);\n      const value = printer(val[key], config, indentationNext, depth, refs);\n\n      result += `${indentationNext + name}: ${value}`;\n\n      if (i < keys.length - 1) {\n        result += `,${config.spacingInner}`;\n      } else if (!config.min) {\n        result += ',';\n      }\n    }\n\n    result += config.spacingOuter + indentation;\n  }\n\n  return result;\n}\n","/Users/simen/repos/jest/packages/pretty-format/src/index.ts",["152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217"],["218"],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually */\n\nimport style = require('ansi-styles');\nimport {\n  printIteratorEntries,\n  printIteratorValues,\n  printListItems,\n  printObjectProperties,\n} from './collections';\nimport AsymmetricMatcher from './plugins/AsymmetricMatcher';\nimport DOMCollection from './plugins/DOMCollection';\nimport DOMElement from './plugins/DOMElement';\nimport Immutable from './plugins/Immutable';\nimport ReactElement from './plugins/ReactElement';\nimport ReactTestComponent from './plugins/ReactTestComponent';\nimport type {\n  Colors,\n  Config,\n  NewPlugin,\n  Options,\n  OptionsReceived,\n  Plugin,\n  Plugins,\n  Refs,\n  Theme,\n} from './types';\n\nexport type {\n  Colors,\n  CompareKeys,\n  Config,\n  Options,\n  OptionsReceived,\n  OldPlugin,\n  NewPlugin,\n  Plugin,\n  Plugins,\n  PrettyFormatOptions,\n  Printer,\n  Refs,\n  Theme,\n} from './types';\n\nconst toString = Object.prototype.toString;\nconst toISOString = Date.prototype.toISOString;\nconst errorToString = Error.prototype.toString;\nconst regExpToString = RegExp.prototype.toString;\n\n/**\n * Explicitly comparing typeof constructor to function avoids undefined as name\n * when mock identity-obj-proxy returns the key as the value for any key.\n */\nconst getConstructorName = (val: new (...args: Array<any>) => unknown) =>\n  (typeof val.constructor === 'function' && val.constructor.name) || 'Object';\n\n/* global window */\n/** Is val is equal to global window object? Works even if it does not exist :) */\nconst isWindow = (val: unknown) =>\n  typeof window !== 'undefined' && val === window;\n\nconst SYMBOL_REGEXP = /^Symbol\\((.*)\\)(.*)$/;\nconst NEWLINE_REGEXP = /\\n/gi;\n\nclass PrettyFormatPluginError extends Error {\n  constructor(message: string, stack: string) {\n    super(message);\n    this.stack = stack;\n    this.name = this.constructor.name;\n  }\n}\n\nfunction isToStringedArrayType(toStringed: string): boolean {\n  return (\n    toStringed === '[object Array]' ||\n    toStringed === '[object ArrayBuffer]' ||\n    toStringed === '[object DataView]' ||\n    toStringed === '[object Float32Array]' ||\n    toStringed === '[object Float64Array]' ||\n    toStringed === '[object Int8Array]' ||\n    toStringed === '[object Int16Array]' ||\n    toStringed === '[object Int32Array]' ||\n    toStringed === '[object Uint8Array]' ||\n    toStringed === '[object Uint8ClampedArray]' ||\n    toStringed === '[object Uint16Array]' ||\n    toStringed === '[object Uint32Array]'\n  );\n}\n\nfunction printNumber(val: number): string {\n  return Object.is(val, -0) ? '-0' : String(val);\n}\n\nfunction printBigInt(val: bigint): string {\n  return String(`${val}n`);\n}\n\nfunction printFunction(val: Function, printFunctionName: boolean): string {\n  if (!printFunctionName) {\n    return '[Function]';\n  }\n  return `[Function ${val.name || 'anonymous'}]`;\n}\n\nfunction printSymbol(val: symbol): string {\n  return String(val).replace(SYMBOL_REGEXP, 'Symbol($1)');\n}\n\nfunction printError(val: Error): string {\n  return `[${errorToString.call(val)}]`;\n}\n\n/**\n * The first port of call for printing an object, handles most of the\n * data-types in JS.\n */\nfunction printBasicValue(\n  val: any,\n  printFunctionName: boolean,\n  escapeRegex: boolean,\n  escapeString: boolean,\n): string | null {\n  if (val === true || val === false) {\n    return `${val}`;\n  }\n  if (val === undefined) {\n    return 'undefined';\n  }\n  if (val === null) {\n    return 'null';\n  }\n\n  const typeOf = typeof val;\n\n  if (typeOf === 'number') {\n    return printNumber(val);\n  }\n  if (typeOf === 'bigint') {\n    return printBigInt(val);\n  }\n  if (typeOf === 'string') {\n    if (escapeString) {\n      return `\"${val.replace(/\"|\\\\/g, '\\\\$&')}\"`;\n    }\n    return `\"${val}\"`;\n  }\n  if (typeOf === 'function') {\n    return printFunction(val, printFunctionName);\n  }\n  if (typeOf === 'symbol') {\n    return printSymbol(val);\n  }\n\n  const toStringed = toString.call(val);\n\n  if (toStringed === '[object WeakMap]') {\n    return 'WeakMap {}';\n  }\n  if (toStringed === '[object WeakSet]') {\n    return 'WeakSet {}';\n  }\n  if (\n    toStringed === '[object Function]' ||\n    toStringed === '[object GeneratorFunction]'\n  ) {\n    return printFunction(val, printFunctionName);\n  }\n  if (toStringed === '[object Symbol]') {\n    return printSymbol(val);\n  }\n  if (toStringed === '[object Date]') {\n    return isNaN(+val) ? 'Date { NaN }' : toISOString.call(val);\n  }\n  if (toStringed === '[object Error]') {\n    return printError(val);\n  }\n  if (toStringed === '[object RegExp]') {\n    if (escapeRegex) {\n      // https://github.com/benjamingr/RegExp.escape/blob/main/polyfill.js\n      return regExpToString.call(val).replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n    return regExpToString.call(val);\n  }\n\n  if (val instanceof Error) {\n    return printError(val);\n  }\n\n  return null;\n}\n\n/**\n * Handles more complex objects ( such as objects with circular references.\n * maps and sets etc )\n */\nfunction printComplexValue(\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  hasCalledToJSON?: boolean,\n): string {\n  if (refs.indexOf(val) !== -1) {\n    return '[Circular]';\n  }\n  refs = refs.slice();\n  refs.push(val);\n\n  const hitMaxDepth = ++depth > config.maxDepth;\n  const min = config.min;\n\n  if (\n    config.callToJSON &&\n    !hitMaxDepth &&\n    val.toJSON &&\n    typeof val.toJSON === 'function' &&\n    !hasCalledToJSON\n  ) {\n    return printer(val.toJSON(), config, indentation, depth, refs, true);\n  }\n\n  const toStringed = toString.call(val);\n  if (toStringed === '[object Arguments]') {\n    return hitMaxDepth\n      ? '[Arguments]'\n      : `${min ? '' : 'Arguments '}[${printListItems(\n          val,\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`;\n  }\n  if (isToStringedArrayType(toStringed)) {\n    return hitMaxDepth\n      ? `[${val.constructor.name}]`\n      : `${\n          min\n            ? ''\n            : !config.printBasicPrototype && val.constructor.name === 'Array'\n            ? ''\n            : `${val.constructor.name} `\n        }[${printListItems(val, config, indentation, depth, refs, printer)}]`;\n  }\n  if (toStringed === '[object Map]') {\n    return hitMaxDepth\n      ? '[Map]'\n      : `Map {${printIteratorEntries(\n          val.entries(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n          ' => ',\n        )}}`;\n  }\n  if (toStringed === '[object Set]') {\n    return hitMaxDepth\n      ? '[Set]'\n      : `Set {${printIteratorValues(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}}`;\n  }\n\n  // Avoid failure to serialize global window object in jsdom test environment.\n  // For example, not even relevant if window is prop of React element.\n  return hitMaxDepth || isWindow(val)\n    ? `[${getConstructorName(val)}]`\n    : `${\n        min\n          ? ''\n          : !config.printBasicPrototype && getConstructorName(val) === 'Object'\n          ? ''\n          : `${getConstructorName(val)} `\n      }{${printObjectProperties(\n        val,\n        config,\n        indentation,\n        depth,\n        refs,\n        printer,\n      )}}`;\n}\n\nfunction isNewPlugin(plugin: Plugin): plugin is NewPlugin {\n  return (plugin as NewPlugin).serialize != null;\n}\n\nfunction printPlugin(\n  plugin: Plugin,\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n): string {\n  let printed;\n\n  try {\n    printed = isNewPlugin(plugin)\n      ? plugin.serialize(val, config, indentation, depth, refs, printer)\n      : plugin.print(\n          val,\n          valChild => printer(valChild, config, indentation, depth, refs),\n          str => {\n            const indentationNext = indentation + config.indent;\n            return (\n              indentationNext +\n              str.replace(NEWLINE_REGEXP, `\\n${indentationNext}`)\n            );\n          },\n          {\n            edgeSpacing: config.spacingOuter,\n            min: config.min,\n            spacing: config.spacingInner,\n          },\n          config.colors,\n        );\n  } catch (error: any) {\n    throw new PrettyFormatPluginError(error.message, error.stack);\n  }\n  if (typeof printed !== 'string') {\n    throw new Error(\n      `pretty-format: Plugin must return type \"string\" but instead returned \"${typeof printed}\".`,\n    );\n  }\n  return printed;\n}\n\nfunction findPlugin(plugins: Plugins, val: unknown) {\n  for (let p = 0; p < plugins.length; p++) {\n    try {\n      if (plugins[p].test(val)) {\n        return plugins[p];\n      }\n    } catch (error: any) {\n      throw new PrettyFormatPluginError(error.message, error.stack);\n    }\n  }\n\n  return null;\n}\n\nfunction printer(\n  val: unknown,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  hasCalledToJSON?: boolean,\n): string {\n  const plugin = findPlugin(config.plugins, val);\n  if (plugin !== null) {\n    return printPlugin(plugin, val, config, indentation, depth, refs);\n  }\n\n  const basicResult = printBasicValue(\n    val,\n    config.printFunctionName,\n    config.escapeRegex,\n    config.escapeString,\n  );\n  if (basicResult !== null) {\n    return basicResult;\n  }\n\n  return printComplexValue(\n    val,\n    config,\n    indentation,\n    depth,\n    refs,\n    hasCalledToJSON,\n  );\n}\n\nconst DEFAULT_THEME: Theme = {\n  comment: 'gray',\n  content: 'reset',\n  prop: 'yellow',\n  tag: 'cyan',\n  value: 'green',\n};\n\nconst DEFAULT_THEME_KEYS = Object.keys(DEFAULT_THEME) as Array<\n  keyof typeof DEFAULT_THEME\n>;\n\n// could be replaced by `satisfies` operator in the future: https://github.com/microsoft/TypeScript/issues/47920\nconst toOptionsSubtype = <T extends Options>(options: T) => options;\n\nexport const DEFAULT_OPTIONS = toOptionsSubtype({\n  callToJSON: true,\n  compareKeys: undefined,\n  escapeRegex: false,\n  escapeString: true,\n  highlight: false,\n  indent: 2,\n  maxDepth: Infinity,\n  maxWidth: Infinity,\n  min: false,\n  plugins: [],\n  printBasicPrototype: true,\n  printFunctionName: true,\n  theme: DEFAULT_THEME,\n});\n\nfunction validateOptions(options: OptionsReceived) {\n  Object.keys(options).forEach(key => {\n    if (!Object.prototype.hasOwnProperty.call(DEFAULT_OPTIONS, key)) {\n      throw new Error(`pretty-format: Unknown option \"${key}\".`);\n    }\n  });\n\n  if (options.min && options.indent !== undefined && options.indent !== 0) {\n    throw new Error(\n      'pretty-format: Options \"min\" and \"indent\" cannot be used together.',\n    );\n  }\n\n  if (options.theme !== undefined) {\n    if (options.theme === null) {\n      throw new Error('pretty-format: Option \"theme\" must not be null.');\n    }\n\n    if (typeof options.theme !== 'object') {\n      throw new Error(\n        `pretty-format: Option \"theme\" must be of type \"object\" but instead received \"${typeof options.theme}\".`,\n      );\n    }\n  }\n}\n\nconst getColorsHighlight = (options: OptionsReceived): Colors =>\n  DEFAULT_THEME_KEYS.reduce((colors, key) => {\n    const value =\n      options.theme && options.theme[key] !== undefined\n        ? options.theme[key]\n        : DEFAULT_THEME[key];\n    const color = value && (style as any)[value];\n    if (\n      color &&\n      typeof color.close === 'string' &&\n      typeof color.open === 'string'\n    ) {\n      colors[key] = color;\n    } else {\n      throw new Error(\n        `pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`,\n      );\n    }\n    return colors;\n  }, Object.create(null));\n\nconst getColorsEmpty = (): Colors =>\n  DEFAULT_THEME_KEYS.reduce((colors, key) => {\n    colors[key] = {close: '', open: ''};\n    return colors;\n  }, Object.create(null));\n\nconst getPrintFunctionName = (options?: OptionsReceived) =>\n  options?.printFunctionName ?? DEFAULT_OPTIONS.printFunctionName;\n\nconst getEscapeRegex = (options?: OptionsReceived) =>\n  options?.escapeRegex ?? DEFAULT_OPTIONS.escapeRegex;\n\nconst getEscapeString = (options?: OptionsReceived) =>\n  options?.escapeString ?? DEFAULT_OPTIONS.escapeString;\n\nconst getConfig = (options?: OptionsReceived): Config => ({\n  callToJSON: options?.callToJSON ?? DEFAULT_OPTIONS.callToJSON,\n  colors: options?.highlight ? getColorsHighlight(options) : getColorsEmpty(),\n  compareKeys:\n    typeof options?.compareKeys === 'function' || options?.compareKeys === null\n      ? options.compareKeys\n      : DEFAULT_OPTIONS.compareKeys,\n  escapeRegex: getEscapeRegex(options),\n  escapeString: getEscapeString(options),\n  indent: options?.min\n    ? ''\n    : createIndent(options?.indent ?? DEFAULT_OPTIONS.indent),\n  maxDepth: options?.maxDepth ?? DEFAULT_OPTIONS.maxDepth,\n  maxWidth: options?.maxWidth ?? DEFAULT_OPTIONS.maxWidth,\n  min: options?.min ?? DEFAULT_OPTIONS.min,\n  plugins: options?.plugins ?? DEFAULT_OPTIONS.plugins,\n  printBasicPrototype: options?.printBasicPrototype ?? true,\n  printFunctionName: getPrintFunctionName(options),\n  spacingInner: options?.min ? ' ' : '\\n',\n  spacingOuter: options?.min ? '' : '\\n',\n});\n\nfunction createIndent(indent: number): string {\n  return new Array(indent + 1).join(' ');\n}\n\n/**\n * Returns a presentation string of your `val` object\n * @param val any potential JavaScript object\n * @param options Custom settings\n */\nexport function format(val: unknown, options?: OptionsReceived): string {\n  if (options) {\n    validateOptions(options);\n    if (options.plugins) {\n      const plugin = findPlugin(options.plugins, val);\n      if (plugin !== null) {\n        return printPlugin(plugin, val, getConfig(options), '', 0, []);\n      }\n    }\n  }\n\n  const basicResult = printBasicValue(\n    val,\n    getPrintFunctionName(options),\n    getEscapeRegex(options),\n    getEscapeString(options),\n  );\n  if (basicResult !== null) {\n    return basicResult;\n  }\n\n  return printComplexValue(val, getConfig(options), '', 0, []);\n}\n\nexport const plugins = {\n  AsymmetricMatcher,\n  DOMCollection,\n  DOMElement,\n  Immutable,\n  ReactElement,\n  ReactTestComponent,\n};\n\nexport default format;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/AsymmetricMatcher.ts",["219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {printListItems, printObjectProperties} from '../collections';\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\n\nconst asymmetricMatcher =\n  typeof Symbol === 'function' && Symbol.for\n    ? Symbol.for('jest.asymmetricMatcher')\n    : 0x1357a5;\nconst SPACE = ' ';\n\nexport const serialize: NewPlugin['serialize'] = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) => {\n  const stringedValue = val.toString();\n\n  if (\n    stringedValue === 'ArrayContaining' ||\n    stringedValue === 'ArrayNotContaining'\n  ) {\n    if (++depth > config.maxDepth) {\n      return `[${stringedValue}]`;\n    }\n    return `${stringedValue + SPACE}[${printListItems(\n      val.sample,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n    )}]`;\n  }\n\n  if (\n    stringedValue === 'ObjectContaining' ||\n    stringedValue === 'ObjectNotContaining'\n  ) {\n    if (++depth > config.maxDepth) {\n      return `[${stringedValue}]`;\n    }\n    return `${stringedValue + SPACE}{${printObjectProperties(\n      val.sample,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n    )}}`;\n  }\n\n  if (\n    stringedValue === 'StringMatching' ||\n    stringedValue === 'StringNotMatching'\n  ) {\n    return (\n      stringedValue +\n      SPACE +\n      printer(val.sample, config, indentation, depth, refs)\n    );\n  }\n\n  if (\n    stringedValue === 'StringContaining' ||\n    stringedValue === 'StringNotContaining'\n  ) {\n    return (\n      stringedValue +\n      SPACE +\n      printer(val.sample, config, indentation, depth, refs)\n    );\n  }\n\n  if (typeof val.toAsymmetricMatcher !== 'function') {\n    throw new Error(\n      `Asymmetric matcher ${val.constructor.name} does not implement toAsymmetricMatcher()`,\n    );\n  }\n\n  return val.toAsymmetricMatcher();\n};\n\nexport const test: NewPlugin['test'] = (val: any) =>\n  val && val.$$typeof === asymmetricMatcher;\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/DOMCollection.ts",["244","245","246","247","248","249","250","251","252","253","254","255"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {printListItems, printObjectProperties} from '../collections';\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\n\nconst SPACE = ' ';\n\nconst OBJECT_NAMES = ['DOMStringMap', 'NamedNodeMap'];\nconst ARRAY_REGEXP = /^(HTML\\w*Collection|NodeList)$/;\n\nconst testName = (name: any) =>\n  OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);\n\nexport const test: NewPlugin['test'] = (val: object) =>\n  val &&\n  val.constructor &&\n  !!val.constructor.name &&\n  testName(val.constructor.name);\n\nconst isNamedNodeMap = (collection: object): collection is NamedNodeMap =>\n  collection.constructor.name === 'NamedNodeMap';\n\nexport const serialize: NewPlugin['serialize'] = (\n  collection: any | NamedNodeMap,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) => {\n  const name = collection.constructor.name;\n  if (++depth > config.maxDepth) {\n    return `[${name}]`;\n  }\n\n  return (\n    (config.min ? '' : name + SPACE) +\n    (OBJECT_NAMES.indexOf(name) !== -1\n      ? `{${printObjectProperties(\n          isNamedNodeMap(collection)\n            ? Array.from(collection).reduce<Record<string, string>>(\n                (props, attribute) => {\n                  props[attribute.name] = attribute.value;\n                  return props;\n                },\n                {},\n              )\n            : {...collection},\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}}`\n      : `[${printListItems(\n          Array.from(collection),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )}]`)\n  );\n};\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/DOMElement.ts",["256","257","258","259","260","261","262","263","264","265","266","267","268","269","270"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\nimport {\n  printChildren,\n  printComment,\n  printElement,\n  printElementAsLeaf,\n  printProps,\n  printText,\n} from './lib/markup';\n\nconst ELEMENT_NODE = 1;\nconst TEXT_NODE = 3;\nconst COMMENT_NODE = 8;\nconst FRAGMENT_NODE = 11;\n\nconst ELEMENT_REGEXP = /^((HTML|SVG)\\w*)?Element$/;\n\nconst testHasAttribute = (val: any) => {\n  try {\n    return typeof val.hasAttribute === 'function' && val.hasAttribute('is');\n  } catch {\n    return false;\n  }\n};\n\nconst testNode = (val: any) => {\n  const constructorName = val.constructor.name;\n  const {nodeType, tagName} = val;\n  const isCustomElement =\n    (typeof tagName === 'string' && tagName.includes('-')) ||\n    testHasAttribute(val);\n\n  return (\n    (nodeType === ELEMENT_NODE &&\n      (ELEMENT_REGEXP.test(constructorName) || isCustomElement)) ||\n    (nodeType === TEXT_NODE && constructorName === 'Text') ||\n    (nodeType === COMMENT_NODE && constructorName === 'Comment') ||\n    (nodeType === FRAGMENT_NODE && constructorName === 'DocumentFragment')\n  );\n};\n\nexport const test: NewPlugin['test'] = (val: any) =>\n  val?.constructor?.name && testNode(val);\n\ntype HandledType = Element | Text | Comment | DocumentFragment;\n\nfunction nodeIsText(node: HandledType): node is Text {\n  return node.nodeType === TEXT_NODE;\n}\n\nfunction nodeIsComment(node: HandledType): node is Comment {\n  return node.nodeType === COMMENT_NODE;\n}\n\nfunction nodeIsFragment(node: HandledType): node is DocumentFragment {\n  return node.nodeType === FRAGMENT_NODE;\n}\n\nexport const serialize: NewPlugin['serialize'] = (\n  node: HandledType,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) => {\n  if (nodeIsText(node)) {\n    return printText(node.data, config);\n  }\n\n  if (nodeIsComment(node)) {\n    return printComment(node.data, config);\n  }\n\n  const type = nodeIsFragment(node)\n    ? 'DocumentFragment'\n    : node.tagName.toLowerCase();\n\n  if (++depth > config.maxDepth) {\n    return printElementAsLeaf(type, config);\n  }\n\n  return printElement(\n    type,\n    printProps(\n      nodeIsFragment(node)\n        ? []\n        : Array.from(node.attributes)\n            .map(attr => attr.name)\n            .sort(),\n      nodeIsFragment(node)\n        ? {}\n        : Array.from(node.attributes).reduce<Record<string, string>>(\n            (props, attribute) => {\n              props[attribute.name] = attribute.value;\n              return props;\n            },\n            {},\n          ),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer,\n    ),\n    printChildren(\n      Array.prototype.slice.call(node.childNodes || node.children),\n      config,\n      indentation + config.indent,\n      depth,\n      refs,\n      printer,\n    ),\n    config,\n    indentation,\n  );\n};\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/Immutable.ts",["271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {printIteratorEntries, printIteratorValues} from '../collections';\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\n\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = (name: string) => `Immutable.${name}`;\nconst printAsLeaf = (name: string) => `[${name}]`;\nconst SPACE = ' ';\nconst LAZY = '…'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n  type: string,\n): string =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : `${getImmutableName(type) + SPACE}{${printIteratorEntries(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer,\n      )}}`;\n\n// Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\nfunction getRecordEntries(val: any): Iterator<any> {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {done: false, value: [key, val.get(key)]};\n      }\n      return {done: true, value: undefined};\n    },\n  };\n}\n\nconst printImmutableRecord = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n): string => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : `${name + SPACE}{${printIteratorEntries(\n        getRecordEntries(val),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer,\n      )}}`;\n};\n\nconst printImmutableSeq = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n): string => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return `${name + SPACE}{${\n      // from Immutable collection of entries or from ECMAScript object\n      val._iter || val._object\n        ? printIteratorEntries(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer,\n          )\n        : LAZY\n    }}`;\n  }\n\n  return `${name + SPACE}[${\n    val._iter || // from Immutable collection of values\n    val._array || // from ECMAScript array\n    val._collection || // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? printIteratorValues(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer,\n        )\n      : LAZY\n  }]`;\n};\n\nconst printImmutableValues = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n  type: string,\n): string =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : `${getImmutableName(type) + SPACE}[${printIteratorValues(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer,\n      )}]`;\n\nexport const serialize: NewPlugin['serialize'] = (\n  val: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map',\n    );\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List',\n    );\n  }\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set',\n    );\n  }\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack',\n    );\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  }\n\n  // For compatibility with immutable v3 and v4, let record be the default.\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n};\n\n// Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\nexport const test: NewPlugin['test'] = (val: any) =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/ReactElement.ts",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as ReactIs from 'react-is';\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\nimport {\n  printChildren,\n  printElement,\n  printElementAsLeaf,\n  printProps,\n} from './lib/markup';\n\n// Given element.props.children, or subtree during recursive traversal,\n// return flattened array of children.\nconst getChildren = (arg: unknown, children: Array<unknown> = []) => {\n  if (Array.isArray(arg)) {\n    arg.forEach(item => {\n      getChildren(item, children);\n    });\n  } else if (arg != null && arg !== false) {\n    children.push(arg);\n  }\n  return children;\n};\n\nconst getType = (element: any) => {\n  const type = element.type;\n  if (typeof type === 'string') {\n    return type;\n  }\n  if (typeof type === 'function') {\n    return type.displayName || type.name || 'Unknown';\n  }\n\n  if (ReactIs.isFragment(element)) {\n    return 'React.Fragment';\n  }\n  if (ReactIs.isSuspense(element)) {\n    return 'React.Suspense';\n  }\n  if (typeof type === 'object' && type !== null) {\n    if (ReactIs.isContextProvider(element)) {\n      return 'Context.Provider';\n    }\n\n    if (ReactIs.isContextConsumer(element)) {\n      return 'Context.Consumer';\n    }\n\n    if (ReactIs.isForwardRef(element)) {\n      if (type.displayName) {\n        return type.displayName;\n      }\n\n      const functionName = type.render.displayName || type.render.name || '';\n\n      return functionName !== '' ? `ForwardRef(${functionName})` : 'ForwardRef';\n    }\n\n    if (ReactIs.isMemo(element)) {\n      const functionName =\n        type.displayName || type.type.displayName || type.type.name || '';\n\n      return functionName !== '' ? `Memo(${functionName})` : 'Memo';\n    }\n  }\n  return 'UNDEFINED';\n};\n\nconst getPropKeys = (element: any) => {\n  const {props} = element;\n\n  return Object.keys(props)\n    .filter(key => key !== 'children' && props[key] !== undefined)\n    .sort();\n};\n\nexport const serialize: NewPlugin['serialize'] = (\n  element: any,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) =>\n  ++depth > config.maxDepth\n    ? printElementAsLeaf(getType(element), config)\n    : printElement(\n        getType(element),\n        printProps(\n          getPropKeys(element),\n          element.props,\n          config,\n          indentation + config.indent,\n          depth,\n          refs,\n          printer,\n        ),\n        printChildren(\n          getChildren(element.props.children),\n          config,\n          indentation + config.indent,\n          depth,\n          refs,\n          printer,\n        ),\n        config,\n        indentation,\n      );\n\nexport const test: NewPlugin['test'] = (val: unknown) =>\n  val != null && ReactIs.isElement(val);\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/ReactTestComponent.ts",["357","358","359","360"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type {Config, NewPlugin, Printer, Refs} from '../types';\nimport {\n  printChildren,\n  printElement,\n  printElementAsLeaf,\n  printProps,\n} from './lib/markup';\n\nexport type ReactTestObject = {\n  $$typeof: symbol;\n  type: string;\n  props?: Record<string, unknown>;\n  children?: null | Array<ReactTestChild>;\n};\n\n// Child can be `number` in Stack renderer but not in Fiber renderer.\ntype ReactTestChild = ReactTestObject | string | number;\n\nconst testSymbol =\n  typeof Symbol === 'function' && Symbol.for\n    ? Symbol.for('react.test.json')\n    : 0xea71357;\n\nconst getPropKeys = (object: ReactTestObject) => {\n  const {props} = object;\n\n  return props\n    ? Object.keys(props)\n        .filter(key => props[key] !== undefined)\n        .sort()\n    : [];\n};\n\nexport const serialize: NewPlugin['serialize'] = (\n  object: ReactTestObject,\n  config: Config,\n  indentation: string,\n  depth: number,\n  refs: Refs,\n  printer: Printer,\n) =>\n  ++depth > config.maxDepth\n    ? printElementAsLeaf(object.type, config)\n    : printElement(\n        object.type,\n        object.props\n          ? printProps(\n              getPropKeys(object),\n              object.props,\n              config,\n              indentation + config.indent,\n              depth,\n              refs,\n              printer,\n            )\n          : '',\n        object.children\n          ? printChildren(\n              object.children,\n              config,\n              indentation + config.indent,\n              depth,\n              refs,\n              printer,\n            )\n          : '',\n        config,\n        indentation,\n      );\n\nexport const test: NewPlugin['test'] = val =>\n  val && val.$$typeof === testSymbol;\n\nconst plugin: NewPlugin = {serialize, test};\n\nexport default plugin;\n","/Users/simen/repos/jest/packages/pretty-format/src/plugins/lib/escapeHTML.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/plugins/lib/markup.ts",[],[],"/Users/simen/repos/jest/packages/pretty-format/src/types.ts",[],[],{"ruleId":"361","severity":2,"message":"362","line":607,"column":11,"nodeType":"363","messageId":"364","endLine":607,"endColumn":68},{"ruleId":"365","severity":2,"message":"366","line":23,"column":3,"nodeType":"367","messageId":"368","endLine":23,"endColumn":28},{"ruleId":"369","severity":2,"message":"370","line":871,"column":14,"nodeType":"371","messageId":"372","endLine":871,"endColumn":23},{"ruleId":"373","severity":1,"message":"370","line":871,"column":14,"nodeType":"371","messageId":"372","endLine":871,"endColumn":23,"suppressions":"374"},{"ruleId":"369","severity":2,"message":"370","line":13,"column":10,"nodeType":"371","messageId":"372","endLine":13,"endColumn":19},{"ruleId":"365","severity":2,"message":"375","line":20,"column":3,"nodeType":"367","messageId":"368","endLine":20,"endColumn":12},{"ruleId":"376","severity":2,"message":"377","line":114,"column":17,"nodeType":"378","messageId":"379","endLine":114,"endColumn":31},{"ruleId":"365","severity":2,"message":"380","line":299,"column":5,"nodeType":"367","messageId":"368","endLine":299,"endColumn":27},{"ruleId":"365","severity":2,"message":"381","line":300,"column":5,"nodeType":"367","messageId":"368","endLine":300,"endColumn":27},{"ruleId":"365","severity":2,"message":"382","line":301,"column":5,"nodeType":"367","messageId":"368","endLine":301,"endColumn":13},{"ruleId":"361","severity":2,"message":"362","line":489,"column":5,"nodeType":"383","messageId":"364","endLine":489,"endColumn":19},{"ruleId":"365","severity":2,"message":"382","line":489,"column":5,"nodeType":"367","messageId":"368","endLine":489,"endColumn":13},{"ruleId":"361","severity":2,"message":"362","line":639,"column":9,"nodeType":"384","messageId":"364","endLine":639,"endColumn":57},{"ruleId":"361","severity":2,"message":"362","line":640,"column":9,"nodeType":"384","messageId":"364","endLine":640,"endColumn":58},{"ruleId":"365","severity":2,"message":"385","line":684,"column":22,"nodeType":"367","messageId":"368","endLine":684,"endColumn":40},{"ruleId":"386","severity":2,"message":"387","line":700,"column":13,"nodeType":"388","messageId":"389","endLine":700,"endColumn":32},{"ruleId":"365","severity":2,"message":"390","line":700,"column":20,"nodeType":"367","messageId":"368","endLine":700,"endColumn":31},{"ruleId":"386","severity":2,"message":"387","line":703,"column":13,"nodeType":"388","messageId":"389","endLine":703,"endColumn":59},{"ruleId":"391","severity":2,"message":"392","line":703,"column":20,"nodeType":"371","messageId":"393","endLine":703,"endColumn":23,"suggestions":"394"},{"ruleId":"365","severity":2,"message":"390","line":703,"column":34,"nodeType":"367","messageId":"368","endLine":703,"endColumn":45},{"ruleId":"365","severity":2,"message":"375","line":749,"column":14,"nodeType":"367","messageId":"368","endLine":749,"endColumn":24},{"ruleId":"365","severity":2,"message":"375","line":769,"column":14,"nodeType":"367","messageId":"368","endLine":769,"endColumn":24},{"ruleId":"365","severity":2,"message":"375","line":789,"column":14,"nodeType":"367","messageId":"368","endLine":789,"endColumn":24},{"ruleId":"386","severity":2,"message":"387","line":804,"column":30,"nodeType":"395","messageId":"389","endLine":804,"endColumn":41},{"ruleId":"396","severity":2,"message":"397","line":804,"column":30,"nodeType":"371","messageId":"398","endLine":804,"endColumn":35},{"ruleId":"361","severity":2,"message":"362","line":839,"column":11,"nodeType":"363","messageId":"364","endLine":839,"endColumn":36},{"ruleId":"365","severity":2,"message":"385","line":840,"column":5,"nodeType":"367","messageId":"368","endLine":840,"endColumn":20},{"ruleId":"365","severity":2,"message":"399","line":887,"column":5,"nodeType":"367","messageId":"368","endLine":887,"endColumn":24},{"ruleId":"365","severity":2,"message":"399","line":895,"column":5,"nodeType":"367","messageId":"368","endLine":895,"endColumn":24},{"ruleId":"365","severity":2,"message":"399","line":903,"column":12,"nodeType":"367","messageId":"368","endLine":903,"endColumn":31},{"ruleId":"361","severity":2,"message":"362","line":943,"column":9,"nodeType":"384","messageId":"364","endLine":943,"endColumn":57},{"ruleId":"361","severity":2,"message":"362","line":944,"column":9,"nodeType":"384","messageId":"364","endLine":944,"endColumn":58},{"ruleId":"373","severity":1,"message":"370","line":13,"column":10,"nodeType":"371","messageId":"372","endLine":13,"endColumn":19,"suppressions":"400"},{"ruleId":"401","severity":2,"message":"402","line":46,"column":17,"nodeType":"403","messageId":"404","endLine":46,"endColumn":24,"suppressions":"405"},{"ruleId":"401","severity":2,"message":"402","line":52,"column":17,"nodeType":"403","messageId":"404","endLine":52,"endColumn":27,"suppressions":"406"},{"ruleId":"401","severity":2,"message":"402","line":58,"column":17,"nodeType":"403","messageId":"404","endLine":58,"endColumn":25,"suppressions":"407"},{"ruleId":"401","severity":2,"message":"402","line":64,"column":17,"nodeType":"403","messageId":"404","endLine":64,"endColumn":49,"suppressions":"408"},{"ruleId":"409","severity":2,"message":"410","line":114,"column":17,"nodeType":"378","messageId":"379","endLine":114,"endColumn":31,"suppressions":"411"},{"ruleId":"412","severity":2,"message":"413","line":333,"column":24,"nodeType":"384","messageId":"414","endLine":333,"endColumn":25,"suppressions":"415"},{"ruleId":"412","severity":2,"message":"413","line":339,"column":24,"nodeType":"384","messageId":"414","endLine":339,"endColumn":25,"suppressions":"416"},{"ruleId":"412","severity":2,"message":"413","line":348,"column":24,"nodeType":"384","messageId":"414","endLine":348,"endColumn":25,"suppressions":"417"},{"ruleId":"391","severity":2,"message":"418","line":19,"column":7,"nodeType":"367","messageId":"419","endLine":19,"endColumn":35},{"ruleId":"391","severity":2,"message":"420","line":21,"column":11,"nodeType":"367","messageId":"421","endLine":21,"endColumn":70,"suggestions":"422"},{"ruleId":"391","severity":2,"message":"420","line":51,"column":8,"nodeType":"367","messageId":"421","endLine":51,"endColumn":20,"suggestions":"423"},{"ruleId":"391","severity":2,"message":"420","line":56,"column":13,"nodeType":"367","messageId":"421","endLine":56,"endColumn":25,"suggestions":"424"},{"ruleId":"391","severity":2,"message":"420","line":83,"column":12,"nodeType":"367","messageId":"421","endLine":83,"endColumn":24,"suggestions":"425"},{"ruleId":"391","severity":2,"message":"420","line":113,"column":8,"nodeType":"367","messageId":"421","endLine":113,"endColumn":20,"suggestions":"426"},{"ruleId":"391","severity":2,"message":"420","line":118,"column":13,"nodeType":"367","messageId":"421","endLine":118,"endColumn":25,"suggestions":"427"},{"ruleId":"391","severity":2,"message":"420","line":130,"column":12,"nodeType":"367","messageId":"421","endLine":130,"endColumn":24,"suggestions":"428"},{"ruleId":"429","severity":2,"message":"430","line":51,"column":18,"nodeType":"367","messageId":"431","endLine":51,"endColumn":43},{"ruleId":"429","severity":2,"message":"430","line":52,"column":21,"nodeType":"367","messageId":"431","endLine":52,"endColumn":47},{"ruleId":"429","severity":2,"message":"430","line":53,"column":23,"nodeType":"367","messageId":"431","endLine":53,"endColumn":47},{"ruleId":"429","severity":2,"message":"430","line":54,"column":24,"nodeType":"367","messageId":"431","endLine":54,"endColumn":49},{"ruleId":"432","severity":2,"message":"433","line":130,"column":15,"nodeType":"371","messageId":"434","endLine":130,"endColumn":18},{"ruleId":"435","severity":2,"message":"436","line":142,"column":24,"nodeType":"371","messageId":"437","endLine":142,"endColumn":27},{"ruleId":"435","severity":2,"message":"438","line":145,"column":24,"nodeType":"371","messageId":"437","endLine":145,"endColumn":27},{"ruleId":"432","severity":2,"message":"433","line":149,"column":18,"nodeType":"395","messageId":"434","endLine":149,"endColumn":46},{"ruleId":"365","severity":2,"message":"439","line":149,"column":18,"nodeType":"367","messageId":"368","endLine":149,"endColumn":29},{"ruleId":"396","severity":2,"message":"397","line":149,"column":18,"nodeType":"367","messageId":"398","endLine":149,"endColumn":29},{"ruleId":"432","severity":2,"message":"433","line":151,"column":16,"nodeType":"371","messageId":"434","endLine":151,"endColumn":19},{"ruleId":"435","severity":2,"message":"440","line":154,"column":26,"nodeType":"371","messageId":"437","endLine":154,"endColumn":29},{"ruleId":"435","severity":2,"message":"441","line":157,"column":24,"nodeType":"371","messageId":"437","endLine":157,"endColumn":27},{"ruleId":"435","severity":2,"message":"440","line":172,"column":26,"nodeType":"371","messageId":"437","endLine":172,"endColumn":29},{"ruleId":"435","severity":2,"message":"441","line":175,"column":24,"nodeType":"371","messageId":"437","endLine":175,"endColumn":27},{"ruleId":"435","severity":2,"message":"442","line":181,"column":23,"nodeType":"371","messageId":"437","endLine":181,"endColumn":26},{"ruleId":"391","severity":2,"message":"392","line":222,"column":5,"nodeType":"367","messageId":"393","endLine":222,"endColumn":15,"suggestions":"443"},{"ruleId":"365","severity":2,"message":"399","line":222,"column":5,"nodeType":"367","messageId":"368","endLine":222,"endColumn":15},{"ruleId":"365","severity":2,"message":"399","line":223,"column":12,"nodeType":"367","messageId":"368","endLine":223,"endColumn":22},{"ruleId":"391","severity":2,"message":"420","line":224,"column":6,"nodeType":"371","messageId":"421","endLine":224,"endColumn":21,"suggestions":"444"},{"ruleId":"365","severity":2,"message":"399","line":226,"column":20,"nodeType":"367","messageId":"368","endLine":226,"endColumn":30},{"ruleId":"396","severity":2,"message":"397","line":226,"column":20,"nodeType":"367","messageId":"398","endLine":226,"endColumn":30},{"ruleId":"435","severity":2,"message":"445","line":234,"column":11,"nodeType":"371","messageId":"437","endLine":234,"endColumn":14},{"ruleId":"432","severity":2,"message":"433","line":244,"column":13,"nodeType":"367","messageId":"434","endLine":244,"endColumn":33},{"ruleId":"365","severity":2,"message":"385","line":244,"column":13,"nodeType":"367","messageId":"368","endLine":244,"endColumn":28},{"ruleId":"365","severity":2,"message":"385","line":248,"column":46,"nodeType":"367","messageId":"368","endLine":248,"endColumn":61},{"ruleId":"432","severity":2,"message":"433","line":250,"column":18,"nodeType":"367","messageId":"434","endLine":250,"endColumn":38},{"ruleId":"365","severity":2,"message":"385","line":250,"column":18,"nodeType":"367","messageId":"368","endLine":250,"endColumn":33},{"ruleId":"435","severity":2,"message":"445","line":251,"column":28,"nodeType":"371","messageId":"437","endLine":251,"endColumn":31},{"ruleId":"435","severity":2,"message":"446","line":257,"column":11,"nodeType":"395","messageId":"437","endLine":257,"endColumn":24},{"ruleId":"365","severity":2,"message":"447","line":257,"column":11,"nodeType":"367","messageId":"368","endLine":257,"endColumn":22},{"ruleId":"396","severity":2,"message":"397","line":257,"column":11,"nodeType":"367","messageId":"398","endLine":257,"endColumn":22},{"ruleId":"435","severity":2,"message":"448","line":270,"column":11,"nodeType":"395","messageId":"437","endLine":270,"endColumn":23},{"ruleId":"365","severity":2,"message":"449","line":270,"column":11,"nodeType":"367","messageId":"368","endLine":270,"endColumn":21},{"ruleId":"396","severity":2,"message":"397","line":270,"column":11,"nodeType":"367","messageId":"398","endLine":270,"endColumn":21},{"ruleId":"435","severity":2,"message":"450","line":282,"column":30,"nodeType":"371","messageId":"437","endLine":282,"endColumn":33},{"ruleId":"435","severity":2,"message":"450","line":286,"column":63,"nodeType":"371","messageId":"437","endLine":286,"endColumn":66},{"ruleId":"435","severity":2,"message":"450","line":288,"column":35,"nodeType":"371","messageId":"437","endLine":288,"endColumn":38},{"ruleId":"435","severity":2,"message":"451","line":290,"column":9,"nodeType":"371","messageId":"437","endLine":290,"endColumn":12},{"ruleId":"435","severity":2,"message":"452","line":334,"column":39,"nodeType":"367","messageId":"437","endLine":334,"endColumn":52},{"ruleId":"365","severity":2,"message":"453","line":334,"column":39,"nodeType":"367","messageId":"368","endLine":334,"endColumn":52},{"ruleId":"435","severity":2,"message":"452","line":334,"column":54,"nodeType":"367","messageId":"437","endLine":334,"endColumn":65},{"ruleId":"365","severity":2,"message":"454","line":334,"column":54,"nodeType":"367","messageId":"368","endLine":334,"endColumn":65},{"ruleId":"435","severity":2,"message":"452","line":351,"column":41,"nodeType":"367","messageId":"437","endLine":351,"endColumn":54},{"ruleId":"365","severity":2,"message":"453","line":351,"column":41,"nodeType":"367","messageId":"368","endLine":351,"endColumn":54},{"ruleId":"435","severity":2,"message":"452","line":351,"column":56,"nodeType":"367","messageId":"437","endLine":351,"endColumn":67},{"ruleId":"365","severity":2,"message":"454","line":351,"column":56,"nodeType":"367","messageId":"368","endLine":351,"endColumn":67},{"ruleId":"391","severity":2,"message":"420","line":429,"column":7,"nodeType":"367","messageId":"421","endLine":429,"endColumn":18,"suggestions":"455"},{"ruleId":"386","severity":2,"message":"387","line":449,"column":3,"nodeType":"395","messageId":"389","endLine":467,"endColumn":26},{"ruleId":"361","severity":2,"message":"362","line":454,"column":11,"nodeType":"363","messageId":"364","endLine":454,"endColumn":49},{"ruleId":"391","severity":2,"message":"456","line":454,"column":19,"nodeType":"371","messageId":"457","endLine":454,"endColumn":24,"suggestions":"458"},{"ruleId":"365","severity":2,"message":"459","line":454,"column":28,"nodeType":"367","messageId":"368","endLine":454,"endColumn":49},{"ruleId":"391","severity":2,"message":"392","line":456,"column":7,"nodeType":"371","messageId":"393","endLine":456,"endColumn":12,"suggestions":"460"},{"ruleId":"365","severity":2,"message":"461","line":457,"column":14,"nodeType":"367","messageId":"368","endLine":457,"endColumn":25},{"ruleId":"365","severity":2,"message":"462","line":458,"column":14,"nodeType":"367","messageId":"368","endLine":458,"endColumn":24},{"ruleId":"361","severity":2,"message":"362","line":460,"column":7,"nodeType":"383","messageId":"364","endLine":460,"endColumn":26},{"ruleId":"365","severity":2,"message":"463","line":460,"column":7,"nodeType":"367","messageId":"368","endLine":460,"endColumn":18},{"ruleId":"432","severity":2,"message":"464","line":463,"column":74,"nodeType":"371","messageId":"434","endLine":463,"endColumn":79},{"ruleId":"386","severity":2,"message":"387","line":466,"column":5,"nodeType":"388","messageId":"389","endLine":466,"endColumn":19},{"ruleId":"386","severity":2,"message":"387","line":470,"column":3,"nodeType":"395","messageId":"389","endLine":473,"endColumn":26},{"ruleId":"365","severity":2,"message":"463","line":471,"column":5,"nodeType":"367","messageId":"368","endLine":471,"endColumn":16},{"ruleId":"386","severity":2,"message":"387","line":472,"column":5,"nodeType":"388","messageId":"389","endLine":472,"endColumn":19},{"ruleId":"391","severity":2,"message":"420","line":486,"column":11,"nodeType":"465","messageId":"421","endLine":486,"endColumn":29,"suggestions":"466"},{"ruleId":"391","severity":2,"message":"420","line":493,"column":11,"nodeType":"465","messageId":"421","endLine":493,"endColumn":23,"suggestions":"467"},{"ruleId":"391","severity":2,"message":"420","line":502,"column":17,"nodeType":"465","messageId":"421","endLine":502,"endColumn":29,"suggestions":"468"},{"ruleId":"391","severity":2,"message":"420","line":503,"column":17,"nodeType":"465","messageId":"421","endLine":503,"endColumn":29,"suggestions":"469"},{"ruleId":"470","severity":1,"message":"471","line":104,"column":29,"nodeType":"371","messageId":"472","endLine":104,"endColumn":37,"suppressions":"473"},{"ruleId":"391","severity":2,"message":"418","line":12,"column":35,"nodeType":"367","messageId":"419","endLine":12,"endColumn":45},{"ruleId":"361","severity":2,"message":"362","line":25,"column":9,"nodeType":"363","messageId":"364","endLine":25,"endColumn":39},{"ruleId":"365","severity":2,"message":"474","line":25,"column":25,"nodeType":"367","messageId":"368","endLine":25,"endColumn":37},{"ruleId":"396","severity":2,"message":"397","line":25,"column":25,"nodeType":"367","messageId":"398","endLine":25,"endColumn":37},{"ruleId":"432","severity":2,"message":"433","line":32,"column":18,"nodeType":"371","messageId":"434","endLine":32,"endColumn":31},{"ruleId":"475","severity":2,"message":"476","line":34,"column":15,"nodeType":"477","messageId":"478","endLine":34,"endColumn":36},{"ruleId":"435","severity":2,"message":"445","line":35,"column":7,"nodeType":"367","messageId":"437","endLine":35,"endColumn":17},{"ruleId":"365","severity":2,"message":"479","line":35,"column":7,"nodeType":"367","messageId":"368","endLine":35,"endColumn":17},{"ruleId":"432","severity":2,"message":"433","line":49,"column":18,"nodeType":"371","messageId":"434","endLine":49,"endColumn":31},{"ruleId":"475","severity":2,"message":"476","line":51,"column":15,"nodeType":"477","messageId":"478","endLine":51,"endColumn":36},{"ruleId":"435","severity":2,"message":"451","line":52,"column":7,"nodeType":"367","messageId":"437","endLine":52,"endColumn":17},{"ruleId":"365","severity":2,"message":"479","line":52,"column":7,"nodeType":"367","messageId":"368","endLine":52,"endColumn":17},{"ruleId":"475","severity":2,"message":"476","line":66,"column":7,"nodeType":"477","messageId":"478","endLine":67,"endColumn":12},{"ruleId":"365","severity":2,"message":"479","line":68,"column":15,"nodeType":"367","messageId":"368","endLine":68,"endColumn":25},{"ruleId":"475","severity":2,"message":"476","line":77,"column":7,"nodeType":"477","messageId":"478","endLine":78,"endColumn":12},{"ruleId":"365","severity":2,"message":"479","line":79,"column":15,"nodeType":"367","messageId":"368","endLine":79,"endColumn":25},{"ruleId":"365","severity":2,"message":"480","line":83,"column":14,"nodeType":"367","messageId":"368","endLine":83,"endColumn":37},{"ruleId":"432","severity":2,"message":"433","line":85,"column":29,"nodeType":"367","messageId":"434","endLine":85,"endColumn":49},{"ruleId":"365","severity":2,"message":"385","line":85,"column":29,"nodeType":"367","messageId":"368","endLine":85,"endColumn":44},{"ruleId":"386","severity":2,"message":"387","line":89,"column":3,"nodeType":"388","messageId":"389","endLine":89,"endColumn":36},{"ruleId":"365","severity":2,"message":"480","line":89,"column":10,"nodeType":"367","messageId":"368","endLine":89,"endColumn":33},{"ruleId":"396","severity":2,"message":"397","line":89,"column":10,"nodeType":"367","messageId":"398","endLine":89,"endColumn":33},{"ruleId":"391","severity":2,"message":"392","line":93,"column":3,"nodeType":"371","messageId":"393","endLine":93,"endColumn":6,"suggestions":"481"},{"ruleId":"386","severity":2,"message":"387","line":93,"column":3,"nodeType":"482","messageId":"389","endLine":93,"endColumn":44},{"ruleId":"365","severity":2,"message":"483","line":93,"column":10,"nodeType":"367","messageId":"368","endLine":93,"endColumn":22},{"ruleId":"435","severity":2,"message":"452","line":17,"column":24,"nodeType":"371","messageId":"437","endLine":17,"endColumn":28},{"ruleId":"435","severity":2,"message":"452","line":17,"column":58,"nodeType":"371","messageId":"437","endLine":17,"endColumn":62},{"ruleId":"391","severity":2,"message":"418","line":20,"column":3,"nodeType":"371","messageId":"419","endLine":20,"endColumn":6},{"ruleId":"391","severity":2,"message":"418","line":21,"column":3,"nodeType":"367","messageId":"419","endLine":21,"endColumn":18},{"ruleId":"361","severity":2,"message":"362","line":36,"column":9,"nodeType":"363","messageId":"364","endLine":36,"endColumn":43},{"ruleId":"365","severity":2,"message":"385","line":36,"column":16,"nodeType":"367","messageId":"368","endLine":36,"endColumn":38},{"ruleId":"432","severity":2,"message":"433","line":38,"column":16,"nodeType":"371","messageId":"434","endLine":38,"endColumn":20},{"ruleId":"475","severity":2,"message":"476","line":42,"column":24,"nodeType":"477","messageId":"478","endLine":42,"endColumn":36},{"ruleId":"435","severity":2,"message":"452","line":43,"column":27,"nodeType":"371","messageId":"437","endLine":43,"endColumn":31},{"ruleId":"435","severity":2,"message":"451","line":45,"column":11,"nodeType":"484","messageId":"437","endLine":53,"endColumn":30},{"ruleId":"435","severity":2,"message":"485","line":45,"column":26,"nodeType":"371","messageId":"437","endLine":45,"endColumn":36},{"ruleId":"435","severity":2,"message":"486","line":61,"column":22,"nodeType":"371","messageId":"437","endLine":61,"endColumn":32},{"ruleId":"386","severity":2,"message":"387","line":27,"column":5,"nodeType":"388","messageId":"389","endLine":27,"endColumn":77},{"ruleId":"365","severity":2,"message":"487","line":27,"column":19,"nodeType":"367","messageId":"368","endLine":27,"endColumn":35},{"ruleId":"365","severity":2,"message":"487","line":27,"column":54,"nodeType":"367","messageId":"368","endLine":27,"endColumn":70},{"ruleId":"396","severity":2,"message":"397","line":27,"column":54,"nodeType":"367","messageId":"398","endLine":27,"endColumn":70},{"ruleId":"361","severity":2,"message":"362","line":34,"column":9,"nodeType":"363","messageId":"364","endLine":34,"endColumn":47},{"ruleId":"365","severity":2,"message":"385","line":34,"column":27,"nodeType":"367","messageId":"368","endLine":34,"endColumn":42},{"ruleId":"361","severity":2,"message":"362","line":35,"column":9,"nodeType":"363","messageId":"364","endLine":35,"endColumn":34},{"ruleId":"361","severity":2,"message":"362","line":36,"column":9,"nodeType":"363","messageId":"364","endLine":38,"endColumn":26},{"ruleId":"386","severity":2,"message":"387","line":40,"column":3,"nodeType":"388","messageId":"389","endLine":46,"endColumn":5},{"ruleId":"435","severity":2,"message":"452","line":42,"column":28,"nodeType":"371","messageId":"437","endLine":42,"endColumn":43},{"ruleId":"391","severity":2,"message":"392","line":42,"column":48,"nodeType":"371","messageId":"393","endLine":42,"endColumn":63,"suggestions":"488"},{"ruleId":"391","severity":2,"message":"392","line":50,"column":3,"nodeType":"465","messageId":"393","endLine":50,"endColumn":25,"suggestions":"489"},{"ruleId":"386","severity":2,"message":"387","line":50,"column":3,"nodeType":"482","messageId":"389","endLine":50,"endColumn":42},{"ruleId":"365","severity":2,"message":"385","line":50,"column":3,"nodeType":"367","messageId":"368","endLine":50,"endColumn":19},{"ruleId":"391","severity":2,"message":"418","line":114,"column":34,"nodeType":"367","messageId":"419","endLine":114,"endColumn":49},{"ruleId":"435","severity":2,"message":"446","line":39,"column":9,"nodeType":"395","messageId":"437","endLine":39,"endColumn":22},{"ruleId":"365","severity":2,"message":"447","line":39,"column":9,"nodeType":"367","messageId":"368","endLine":39,"endColumn":20},{"ruleId":"396","severity":2,"message":"397","line":39,"column":9,"nodeType":"367","messageId":"398","endLine":39,"endColumn":20},{"ruleId":"365","severity":2,"message":"490","line":53,"column":15,"nodeType":"367","messageId":"368","endLine":53,"endColumn":24},{"ruleId":"361","severity":2,"message":"362","line":54,"column":15,"nodeType":"363","messageId":"364","endLine":54,"endColumn":35},{"ruleId":"365","severity":2,"message":"490","line":54,"column":21,"nodeType":"367","messageId":"368","endLine":54,"endColumn":30},{"ruleId":"365","severity":2,"message":"491","line":55,"column":43,"nodeType":"367","messageId":"368","endLine":55,"endColumn":50},{"ruleId":"396","severity":2,"message":"397","line":55,"column":43,"nodeType":"367","messageId":"398","endLine":55,"endColumn":50},{"ruleId":"435","severity":2,"message":"452","line":72,"column":33,"nodeType":"482","messageId":"437","endLine":72,"endColumn":54},{"ruleId":"391","severity":2,"message":"392","line":72,"column":33,"nodeType":"367","messageId":"393","endLine":72,"endColumn":42,"suggestions":"492"},{"ruleId":"365","severity":2,"message":"493","line":72,"column":33,"nodeType":"367","messageId":"368","endLine":72,"endColumn":42},{"ruleId":"435","severity":2,"message":"494","line":76,"column":9,"nodeType":"395","messageId":"437","endLine":76,"endColumn":30},{"ruleId":"391","severity":2,"message":"392","line":99,"column":7,"nodeType":"367","messageId":"393","endLine":99,"endColumn":29,"suggestions":"495"},{"ruleId":"365","severity":2,"message":"496","line":99,"column":7,"nodeType":"367","messageId":"368","endLine":99,"endColumn":29},{"ruleId":"391","severity":2,"message":"392","line":102,"column":7,"nodeType":"367","messageId":"393","endLine":102,"endColumn":16,"suggestions":"497"},{"ruleId":"365","severity":2,"message":"498","line":102,"column":7,"nodeType":"367","messageId":"368","endLine":102,"endColumn":16},{"ruleId":"391","severity":2,"message":"392","line":102,"column":20,"nodeType":"367","messageId":"393","endLine":102,"endColumn":31,"suggestions":"499"},{"ruleId":"365","severity":2,"message":"500","line":102,"column":20,"nodeType":"367","messageId":"368","endLine":102,"endColumn":31},{"ruleId":"435","severity":2,"message":"446","line":104,"column":13,"nodeType":"395","messageId":"437","endLine":104,"endColumn":26},{"ruleId":"365","severity":2,"message":"447","line":104,"column":13,"nodeType":"367","messageId":"368","endLine":104,"endColumn":24},{"ruleId":"396","severity":2,"message":"397","line":104,"column":13,"nodeType":"367","messageId":"398","endLine":104,"endColumn":24},{"ruleId":"391","severity":2,"message":"392","line":116,"column":5,"nodeType":"367","messageId":"393","endLine":116,"endColumn":14,"suggestions":"501"},{"ruleId":"365","severity":2,"message":"498","line":116,"column":5,"nodeType":"367","messageId":"368","endLine":116,"endColumn":14},{"ruleId":"391","severity":2,"message":"392","line":117,"column":5,"nodeType":"367","messageId":"393","endLine":117,"endColumn":15,"suggestions":"502"},{"ruleId":"365","severity":2,"message":"503","line":117,"column":5,"nodeType":"367","messageId":"368","endLine":117,"endColumn":15},{"ruleId":"391","severity":2,"message":"392","line":118,"column":5,"nodeType":"367","messageId":"393","endLine":118,"endColumn":20,"suggestions":"504"},{"ruleId":"365","severity":2,"message":"505","line":118,"column":5,"nodeType":"367","messageId":"368","endLine":118,"endColumn":20},{"ruleId":"391","severity":2,"message":"392","line":119,"column":5,"nodeType":"367","messageId":"393","endLine":119,"endColumn":18,"suggestions":"506"},{"ruleId":"365","severity":2,"message":"507","line":119,"column":5,"nodeType":"367","messageId":"368","endLine":119,"endColumn":18},{"ruleId":"435","severity":2,"message":"448","line":121,"column":11,"nodeType":"395","messageId":"437","endLine":121,"endColumn":23},{"ruleId":"365","severity":2,"message":"449","line":121,"column":11,"nodeType":"367","messageId":"368","endLine":121,"endColumn":21},{"ruleId":"396","severity":2,"message":"397","line":121,"column":11,"nodeType":"367","messageId":"398","endLine":121,"endColumn":21},{"ruleId":"435","severity":2,"message":"448","line":144,"column":9,"nodeType":"395","messageId":"437","endLine":144,"endColumn":21},{"ruleId":"365","severity":2,"message":"449","line":144,"column":9,"nodeType":"367","messageId":"368","endLine":144,"endColumn":19},{"ruleId":"396","severity":2,"message":"397","line":144,"column":9,"nodeType":"367","messageId":"398","endLine":144,"endColumn":19},{"ruleId":"391","severity":2,"message":"392","line":160,"column":7,"nodeType":"367","messageId":"393","endLine":160,"endColumn":27,"suggestions":"508"},{"ruleId":"365","severity":2,"message":"509","line":160,"column":7,"nodeType":"367","messageId":"368","endLine":160,"endColumn":27},{"ruleId":"391","severity":2,"message":"392","line":168,"column":7,"nodeType":"367","messageId":"393","endLine":168,"endColumn":31,"suggestions":"510"},{"ruleId":"365","severity":2,"message":"511","line":168,"column":7,"nodeType":"367","messageId":"368","endLine":168,"endColumn":31},{"ruleId":"391","severity":2,"message":"392","line":172,"column":7,"nodeType":"367","messageId":"393","endLine":172,"endColumn":28,"suggestions":"512"},{"ruleId":"365","severity":2,"message":"513","line":172,"column":7,"nodeType":"367","messageId":"368","endLine":172,"endColumn":28},{"ruleId":"391","severity":2,"message":"392","line":183,"column":7,"nodeType":"367","messageId":"393","endLine":183,"endColumn":27,"suggestions":"514"},{"ruleId":"365","severity":2,"message":"515","line":183,"column":7,"nodeType":"367","messageId":"368","endLine":183,"endColumn":27},{"ruleId":"391","severity":2,"message":"392","line":191,"column":7,"nodeType":"367","messageId":"393","endLine":191,"endColumn":31,"suggestions":"516"},{"ruleId":"365","severity":2,"message":"511","line":191,"column":7,"nodeType":"367","messageId":"368","endLine":191,"endColumn":31},{"ruleId":"391","severity":2,"message":"392","line":194,"column":7,"nodeType":"367","messageId":"393","endLine":194,"endColumn":29,"suggestions":"517"},{"ruleId":"365","severity":2,"message":"518","line":194,"column":7,"nodeType":"367","messageId":"368","endLine":194,"endColumn":29},{"ruleId":"391","severity":2,"message":"392","line":206,"column":7,"nodeType":"367","messageId":"393","endLine":206,"endColumn":27,"suggestions":"519"},{"ruleId":"365","severity":2,"message":"520","line":206,"column":7,"nodeType":"367","messageId":"368","endLine":206,"endColumn":27},{"ruleId":"391","severity":2,"message":"392","line":217,"column":3,"nodeType":"371","messageId":"393","endLine":217,"endColumn":6,"suggestions":"521"},{"ruleId":"386","severity":2,"message":"387","line":217,"column":3,"nodeType":"482","messageId":"389","endLine":218,"endColumn":75},{"ruleId":"365","severity":2,"message":"366","line":218,"column":4,"nodeType":"367","messageId":"368","endLine":218,"endColumn":29},{"ruleId":"365","severity":2,"message":"522","line":218,"column":42,"nodeType":"367","messageId":"368","endLine":218,"endColumn":65},{"ruleId":"361","severity":2,"message":"362","line":31,"column":9,"nodeType":"363","messageId":"364","endLine":31,"endColumn":28},{"ruleId":"365","severity":2,"message":"523","line":31,"column":16,"nodeType":"367","messageId":"368","endLine":31,"endColumn":28},{"ruleId":"386","severity":2,"message":"387","line":36,"column":5,"nodeType":"388","messageId":"389","endLine":36,"endColumn":55},{"ruleId":"391","severity":2,"message":"392","line":36,"column":12,"nodeType":"367","messageId":"393","endLine":36,"endColumn":28,"suggestions":"524"},{"ruleId":"365","severity":2,"message":"525","line":36,"column":12,"nodeType":"367","messageId":"368","endLine":36,"endColumn":28},{"ruleId":"391","severity":2,"message":"392","line":36,"column":32,"nodeType":"367","messageId":"393","endLine":36,"endColumn":41,"suggestions":"526"},{"ruleId":"365","severity":2,"message":"375","line":36,"column":32,"nodeType":"367","messageId":"368","endLine":36,"endColumn":41},{"ruleId":"391","severity":2,"message":"392","line":55,"column":11,"nodeType":"367","messageId":"393","endLine":55,"endColumn":27,"suggestions":"527"},{"ruleId":"365","severity":2,"message":"525","line":55,"column":11,"nodeType":"367","messageId":"368","endLine":55,"endColumn":27},{"ruleId":"386","severity":2,"message":"387","line":56,"column":9,"nodeType":"388","messageId":"389","endLine":56,"endColumn":33},{"ruleId":"365","severity":2,"message":"525","line":56,"column":16,"nodeType":"367","messageId":"368","endLine":56,"endColumn":32},{"ruleId":"361","severity":2,"message":"362","line":59,"column":13,"nodeType":"363","messageId":"364","endLine":59,"endColumn":77},{"ruleId":"391","severity":2,"message":"392","line":59,"column":28,"nodeType":"367","messageId":"393","endLine":59,"endColumn":51,"suggestions":"528"},{"ruleId":"365","severity":2,"message":"529","line":59,"column":28,"nodeType":"367","messageId":"368","endLine":59,"endColumn":39},{"ruleId":"391","severity":2,"message":"392","line":59,"column":55,"nodeType":"367","messageId":"393","endLine":59,"endColumn":71,"suggestions":"530"},{"ruleId":"365","severity":2,"message":"529","line":59,"column":55,"nodeType":"367","messageId":"368","endLine":59,"endColumn":66},{"ruleId":"432","severity":2,"message":"433","line":61,"column":50,"nodeType":"371","messageId":"434","endLine":61,"endColumn":62},{"ruleId":"361","severity":2,"message":"362","line":65,"column":13,"nodeType":"363","messageId":"364","endLine":66,"endColumn":74},{"ruleId":"391","severity":2,"message":"392","line":66,"column":9,"nodeType":"367","messageId":"393","endLine":66,"endColumn":25,"suggestions":"531"},{"ruleId":"365","severity":2,"message":"525","line":66,"column":9,"nodeType":"367","messageId":"368","endLine":66,"endColumn":25},{"ruleId":"391","severity":2,"message":"392","line":66,"column":29,"nodeType":"367","messageId":"393","endLine":66,"endColumn":50,"suggestions":"532"},{"ruleId":"365","severity":2,"message":"523","line":66,"column":29,"nodeType":"367","messageId":"368","endLine":66,"endColumn":38},{"ruleId":"391","severity":2,"message":"392","line":66,"column":54,"nodeType":"367","messageId":"393","endLine":66,"endColumn":68,"suggestions":"533"},{"ruleId":"365","severity":2,"message":"523","line":66,"column":54,"nodeType":"367","messageId":"368","endLine":66,"endColumn":63},{"ruleId":"432","severity":2,"message":"433","line":68,"column":44,"nodeType":"371","messageId":"434","endLine":68,"endColumn":56},{"ruleId":"361","severity":2,"message":"362","line":75,"column":9,"nodeType":"363","messageId":"364","endLine":75,"endColumn":26},{"ruleId":"435","severity":2,"message":"534","line":77,"column":22,"nodeType":"371","messageId":"437","endLine":77,"endColumn":27},{"ruleId":"365","severity":2,"message":"463","line":78,"column":42,"nodeType":"367","messageId":"368","endLine":78,"endColumn":52},{"ruleId":"435","severity":2,"message":"452","line":91,"column":26,"nodeType":"395","messageId":"437","endLine":91,"endColumn":42},{"ruleId":"435","severity":2,"message":"452","line":93,"column":9,"nodeType":"395","messageId":"437","endLine":93,"endColumn":25},{"ruleId":"435","severity":2,"message":"451","line":96,"column":11,"nodeType":"367","messageId":"437","endLine":96,"endColumn":24},{"ruleId":"365","severity":2,"message":"535","line":96,"column":11,"nodeType":"367","messageId":"368","endLine":96,"endColumn":24},{"ruleId":"365","severity":2,"message":"535","line":104,"column":23,"nodeType":"367","messageId":"368","endLine":104,"endColumn":36},{"ruleId":"391","severity":2,"message":"418","line":27,"column":35,"nodeType":"367","messageId":"419","endLine":27,"endColumn":45},{"ruleId":"391","severity":2,"message":"392","line":79,"column":3,"nodeType":"371","messageId":"393","endLine":79,"endColumn":6,"suggestions":"536"},{"ruleId":"386","severity":2,"message":"387","line":79,"column":3,"nodeType":"482","messageId":"389","endLine":79,"endColumn":37},{"ruleId":"365","severity":2,"message":"483","line":79,"column":10,"nodeType":"367","messageId":"368","endLine":79,"endColumn":22},"@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment","@typescript-eslint/no-unsafe-member-access","Unsafe member access [IS_ITERABLE_SENTINEL] on an `any` value.","MemberExpression","unsafeMemberExpression","prefer-rest-params","Use the rest parameters instead of 'arguments'.","Identifier","preferRestParams","local/prefer-rest-params-eventually",["537"],"Unsafe member access .name on an `any` value.","@typescript-eslint/no-implied-eval","Implied eval. Do not use the Function constructor to create functions.","NewExpression","noFunctionConstructor","Unsafe member access [Symbol('symbol1')] on an `any` value.","Unsafe member access [Symbol('symbol2')] on an `any` value.","Unsafe member access .prop on an `any` value.","AssignmentExpression","Property","Unsafe member access .constructor on an `any` value.","@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","ReturnStatement","unsafeReturn","Unsafe member access .payload on an `any` value.","@typescript-eslint/strict-boolean-expressions","Unexpected any value in conditional. An explicit comparison or type cast is required.","conditionErrorAny",["538"],"CallExpression","@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","unsafeCall","Unsafe member access .toJSON on an `any` value.",["539"],"no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray",["540"],["541"],["542"],["543"],"no-new-func","The Function constructor is eval.",["544"],"sort-keys","Expected object keys to be in ascending order. 'a' should be before 'b'.","sortKeys",["545"],["546"],["547"],"Unexpected object value in conditional. The condition is always true.","conditionErrorObject","Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","conditionErrorNullableBoolean",["548","549"],["550","551"],["552","553"],["554","555"],["556","557"],["558","559"],["560","561"],"@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","unboundWithoutThisAnnotation","@typescript-eslint/restrict-template-expressions","Invalid type \"any\" of template literal expression.","invalidType","@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `number`.","unsafeArgument","Unsafe argument of type `any` assigned to a parameter of type `bigint`.","Unsafe member access .replace on an `any` value.","Unsafe argument of type `any` assigned to a parameter of type `Function`.","Unsafe argument of type `any` assigned to a parameter of type `symbol`.","Unsafe argument of type `any` assigned to a parameter of type `Error`.",["562"],["563","564"],"Unsafe argument of type `any` assigned to a parameter of type `ArrayLike<unknown>`.","Unsafe argument of type `any` assigned to a parameter of type `Iterator<[unknown, unknown], any, undefined>`.","Unsafe member access .entries on an `any` value.","Unsafe argument of type `any` assigned to a parameter of type `Iterator<unknown, any, undefined>`.","Unsafe member access .values on an `any` value.","Unsafe argument of type `any` assigned to a parameter of type `new (...args: any[]) => unknown`.","Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown>`.","Unsafe argument of type `any` assigned to a parameter of type `string`.","Unsafe member access .message on an `any` value.","Unsafe member access .stack on an `any` value.",["565","566"],"Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","conditionErrorNullableString",["567","568","569"],"Unsafe member access [value] on an `any` value.",["570"],"Unsafe member access .close on an `any` value.","Unsafe member access .open on an `any` value.","Unsafe member access [key] on an `any` value.","Invalid type \"string | undefined\" of template literal expression.","ChainExpression",["571","572"],["573","574"],["575","576"],["577","578"],"local/ban-types-eventually","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","bannedTypeMessage",["579"],"Unsafe member access .toString on an `any` value.","@typescript-eslint/restrict-plus-operands","Operands of '+' operation with any is possible only with string, number, bigint or any","BinaryExpression","notValidAnys","Unsafe member access .sample on an `any` value.","Unsafe member access .toAsymmetricMatcher on an `any` value.",["580"],"LogicalExpression","Unsafe member access .$$typeof on an `any` value.","ConditionalExpression","Unsafe argument of type `any` assigned to a parameter of type `object`.","Unsafe argument of type `any` assigned to a parameter of type `ArrayLike<unknown> | Iterable<unknown>`.","Unsafe member access .hasAttribute on an `any` value.",["581"],["582"],"Unsafe member access ._keys on an `any` value.","Unsafe member access .get on an `any` value.",["583"],"Unsafe member access ._name on an `any` value.","Unsafe argument of type `Iterator<any, any, undefined>` assigned to a parameter of type `Iterator<[unknown, unknown], any, undefined>`.",["584"],"Unsafe member access [IS_KEYED_SENTINEL] on an `any` value.",["585"],"Unsafe member access ._iter on an `any` value.",["586"],"Unsafe member access ._object on an `any` value.",["587"],["588"],"Unsafe member access ._array on an `any` value.",["589"],"Unsafe member access ._collection on an `any` value.",["590"],"Unsafe member access ._iterable on an `any` value.",["591"],"Unsafe member access [IS_MAP_SENTINEL] on an `any` value.",["592"],"Unsafe member access [IS_ORDERED_SENTINEL] on an `any` value.",["593"],"Unsafe member access [IS_LIST_SENTINEL] on an `any` value.",["594"],"Unsafe member access [IS_SET_SENTINEL] on an `any` value.",["595"],["596"],"Unsafe member access [IS_STACK_SENTINEL] on an `any` value.",["597"],"Unsafe member access [IS_SEQ_SENTINEL] on an `any` value.",["598"],"Unsafe member access [IS_RECORD_SENTINEL] on an `any` value.","Unsafe member access .type on an `any` value.",["599"],"Unsafe member access .displayName on an `any` value.",["600"],["601"],["602"],"Unsafe member access .render on an `any` value.",["603"],["604"],["605"],["606"],"Unsafe argument of type `any` assigned to a parameter of type `{}`.","Unsafe member access .props on an `any` value.",["607"],{"kind":"608","justification":"609"},{"messageId":"610","fix":"611","desc":"612"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"kind":"608","justification":"609"},{"messageId":"613","fix":"614","desc":"615"},{"messageId":"616","fix":"617","desc":"618"},{"messageId":"613","fix":"619","desc":"615"},{"messageId":"620","fix":"621","desc":"622"},{"messageId":"613","fix":"623","desc":"615"},{"messageId":"620","fix":"624","desc":"622"},{"messageId":"613","fix":"625","desc":"615"},{"messageId":"620","fix":"626","desc":"622"},{"messageId":"613","fix":"627","desc":"615"},{"messageId":"620","fix":"628","desc":"622"},{"messageId":"613","fix":"629","desc":"615"},{"messageId":"620","fix":"630","desc":"622"},{"messageId":"613","fix":"631","desc":"615"},{"messageId":"620","fix":"632","desc":"622"},{"messageId":"610","fix":"633","desc":"612"},{"messageId":"613","fix":"634","desc":"615"},{"messageId":"620","fix":"635","desc":"622"},{"messageId":"613","fix":"636","desc":"615"},{"messageId":"616","fix":"637","desc":"618"},{"messageId":"638","fix":"639","desc":"640"},{"messageId":"641","fix":"642","desc":"643"},{"messageId":"610","fix":"644","desc":"612"},{"messageId":"610","fix":"645","desc":"612"},{"messageId":"613","fix":"646","desc":"615"},{"messageId":"616","fix":"647","desc":"618"},{"messageId":"613","fix":"648","desc":"615"},{"messageId":"616","fix":"649","desc":"618"},{"messageId":"613","fix":"650","desc":"615"},{"messageId":"616","fix":"651","desc":"618"},{"messageId":"613","fix":"652","desc":"615"},{"messageId":"616","fix":"653","desc":"618"},{"kind":"608","justification":"609"},{"messageId":"610","fix":"654","desc":"612"},{"messageId":"610","fix":"655","desc":"612"},{"messageId":"610","fix":"656","desc":"612"},{"messageId":"610","fix":"657","desc":"612"},{"messageId":"610","fix":"658","desc":"612"},{"messageId":"610","fix":"659","desc":"612"},{"messageId":"610","fix":"660","desc":"612"},{"messageId":"610","fix":"661","desc":"612"},{"messageId":"610","fix":"662","desc":"612"},{"messageId":"610","fix":"663","desc":"612"},{"messageId":"610","fix":"664","desc":"612"},{"messageId":"610","fix":"665","desc":"612"},{"messageId":"610","fix":"666","desc":"612"},{"messageId":"610","fix":"667","desc":"612"},{"messageId":"610","fix":"668","desc":"612"},{"messageId":"610","fix":"669","desc":"612"},{"messageId":"610","fix":"670","desc":"612"},{"messageId":"610","fix":"671","desc":"612"},{"messageId":"610","fix":"672","desc":"612"},{"messageId":"610","fix":"673","desc":"612"},{"messageId":"610","fix":"674","desc":"612"},{"messageId":"610","fix":"675","desc":"612"},{"messageId":"610","fix":"676","desc":"612"},{"messageId":"610","fix":"677","desc":"612"},{"messageId":"610","fix":"678","desc":"612"},{"messageId":"610","fix":"679","desc":"612"},{"messageId":"610","fix":"680","desc":"612"},{"messageId":"610","fix":"681","desc":"612"},"directive","","conditionFixCastBoolean",{"range":"682","text":"683"},"Explicitly cast value to a boolean (`Boolean(value)`)","conditionFixDefaultFalse",{"range":"684","text":"685"},"Explicitly treat nullish value the same as false (`value ?? false`)","conditionFixCompareTrue",{"range":"684","text":"686"},"Change condition to check if true (`value === true`)",{"range":"687","text":"688"},"conditionFixCompareFalse",{"range":"689","text":"690"},"Change condition to check if false (`value === false`)",{"range":"691","text":"688"},{"range":"692","text":"690"},{"range":"693","text":"688"},{"range":"694","text":"690"},{"range":"695","text":"688"},{"range":"696","text":"690"},{"range":"697","text":"688"},{"range":"698","text":"690"},{"range":"699","text":"688"},{"range":"700","text":"690"},{"range":"701","text":"702"},{"range":"703","text":"704"},{"range":"705","text":"706"},{"range":"707","text":"708"},{"range":"707","text":"709"},"conditionFixCompareNullish",{"range":"710","text":"711"},"Change condition to check for null/undefined (`value != null`)","conditionFixDefaultEmptyString",{"range":"710","text":"712"},"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",{"range":"710","text":"713"},{"range":"714","text":"715"},{"range":"716","text":"717"},{"range":"716","text":"718"},{"range":"719","text":"720"},{"range":"719","text":"721"},{"range":"722","text":"720"},{"range":"722","text":"721"},{"range":"723","text":"720"},{"range":"723","text":"721"},{"range":"724","text":"683"},{"range":"725","text":"726"},{"range":"727","text":"728"},{"range":"729","text":"730"},{"range":"731","text":"732"},{"range":"733","text":"734"},{"range":"735","text":"736"},{"range":"737","text":"734"},{"range":"738","text":"739"},{"range":"740","text":"741"},{"range":"742","text":"743"},{"range":"744","text":"745"},{"range":"746","text":"747"},{"range":"748","text":"749"},{"range":"750","text":"751"},{"range":"752","text":"747"},{"range":"753","text":"754"},{"range":"755","text":"756"},{"range":"757","text":"683"},{"range":"758","text":"759"},{"range":"760","text":"761"},{"range":"762","text":"763"},{"range":"764","text":"765"},{"range":"766","text":"767"},{"range":"768","text":"759"},{"range":"769","text":"770"},{"range":"771","text":"772"},{"range":"773","text":"683"},[19343,19346],"(Boolean(val))",[642,701],"Object.getOwnPropertyDescriptor(object, symbol)!.enumerable ?? false","Object.getOwnPropertyDescriptor(object, symbol)!.enumerable === true",[1430,1442],"(current.done ?? false)",[1429,1442],"current.done === false",[1552,1564],[1551,1564],[2046,2058],[2045,2058],[2645,2657],[2644,2657],[2767,2779],[2766,2779],[3029,3041],[3028,3041],[5475,5485],"(Boolean(val.toJSON))",[5534,5549],"(hasCalledToJSON ?? false)",[5533,5549],"(hasCalledToJSON === false)",[10455,10466],"(options.min ?? false)","(options.min === true)",[11254,11259],"(value != null)","(value ?? \"\")","(Boolean(value))",[11301,11306],"(Boolean(color))",[12291,12309],"((options?.highlight) ?? false)","((options?.highlight) === true)",[12612,12624],"((options?.min) ?? false)","((options?.min) === true)",[13044,13056],[13087,13099],[2100,2103],[1043,1058],"(Boolean(isCustomElement))",[1333,1355],"(Boolean((val?.constructor?.name)))",[2284,2293],"(Boolean(val._name))",[2808,2830],"Boolean(val[IS_KEYED_SENTINEL])",[2943,2952],"(Boolean(val._iter))",[2956,2967],"(Boolean(val._object))",[3204,3213],[3260,3270],"(Boolean(val._array))",[3303,3318],"(Boolean(val._collection))",[3372,3385],"(Boolean(val._iterable))",[4196,4216],"Boolean(val[IS_MAP_SENTINEL])",[4344,4368],"(Boolean(val[IS_ORDERED_SENTINEL]))",[4411,4432],"Boolean(val[IS_LIST_SENTINEL])",[4584,4604],"Boolean(val[IS_SET_SENTINEL])",[4731,4755],[4797,4819],"Boolean(val[IS_STACK_SENTINEL])",[4973,4993],"Boolean(val[IS_SEQ_SENTINEL])",[5442,5445],[956,972],"(Boolean(type.displayName))",[976,985],"(Boolean(type.name))",[1419,1435],"Boolean(type.displayName)",[1508,1531],"(Boolean(type.render.displayName))",[1535,1551],"(Boolean(type.render.name))",[1718,1734],[1738,1759],"(Boolean(type.type.displayName))",[1763,1777],"(Boolean(type.type.name))",[1863,1866]]