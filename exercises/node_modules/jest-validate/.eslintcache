[{"/Users/simen/repos/jest/packages/jest-validate/src/__tests__/fixtures/jestConfig.ts":"1","/Users/simen/repos/jest/packages/jest-validate/src/__tests__/validate.test.ts":"2","/Users/simen/repos/jest/packages/jest-validate/src/condition.ts":"3","/Users/simen/repos/jest/packages/jest-validate/src/defaultConfig.ts":"4","/Users/simen/repos/jest/packages/jest-validate/src/deprecated.ts":"5","/Users/simen/repos/jest/packages/jest-validate/src/errors.ts":"6","/Users/simen/repos/jest/packages/jest-validate/src/exampleConfig.ts":"7","/Users/simen/repos/jest/packages/jest-validate/src/index.ts":"8","/Users/simen/repos/jest/packages/jest-validate/src/types.ts":"9","/Users/simen/repos/jest/packages/jest-validate/src/utils.ts":"10","/Users/simen/repos/jest/packages/jest-validate/src/validate.ts":"11","/Users/simen/repos/jest/packages/jest-validate/src/validateCLIOptions.ts":"12","/Users/simen/repos/jest/packages/jest-validate/src/warnings.ts":"13"},{"size":4543,"mtime":1665737657519,"results":"14","hashOfConfig":"15"},{"size":6801,"mtime":1665737657519,"results":"16","hashOfConfig":"15"},{"size":1301,"mtime":1665461180583,"results":"17","hashOfConfig":"15"},{"size":969,"mtime":1662710982183,"results":"18","hashOfConfig":"15"},{"size":902,"mtime":1662710982183,"results":"19","hashOfConfig":"15"},{"size":1417,"mtime":1664535326155,"results":"20","hashOfConfig":"15"},{"size":860,"mtime":1665461180584,"results":"21","hashOfConfig":"15"},{"size":532,"mtime":1662710982183,"results":"22","hashOfConfig":"15"},{"size":1225,"mtime":1662710982183,"results":"23","hashOfConfig":"15"},{"size":1888,"mtime":1665461180584,"results":"24","hashOfConfig":"15"},{"size":3696,"mtime":1663311355531,"results":"25","hashOfConfig":"15"},{"size":3458,"mtime":1664535326156,"results":"26","hashOfConfig":"15"},{"size":1148,"mtime":1664535326156,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"1887smt",{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":21,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"/Users/simen/repos/jest/packages/jest-validate/src/__tests__/fixtures/jestConfig.ts",["76","77","78","79","80","81","82"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {tmpdir} from 'os';\nimport * as path from 'path';\nimport chalk = require('chalk');\n\nconst NODE_MODULES = `${path.sep}node_modules${path.sep}`;\nconst replacePathSepForRegex = (string: string) => {\n  if (path.sep === '\\\\') {\n    return string.replace(/(\\/|\\\\(?!\\.))/g, '\\\\\\\\');\n  }\n  return string;\n};\n\nconst NODE_MODULES_REGEXP = replacePathSepForRegex(NODE_MODULES);\n\nconst defaultConfig = {\n  automock: false,\n  bail: 0,\n  cacheDirectory: path.join(tmpdir(), 'jest'),\n  clearMocks: false,\n  coveragePathIgnorePatterns: [NODE_MODULES_REGEXP],\n  coverageReporters: ['json', 'text', 'lcov', 'clover'],\n  expand: false,\n  fakeTimers: {enableGlobally: false},\n  globals: {},\n  haste: {},\n  moduleDirectories: ['node_modules'],\n  moduleFileExtensions: ['js', 'json', 'jsx', 'node'],\n  moduleNameMapper: {},\n  modulePathIgnorePatterns: [],\n  noStackTrace: false,\n  notify: false,\n  notifyMode: 'failure-change',\n  preset: null,\n  prettierPath: 'prettier',\n  resetMocks: false,\n  resetModules: false,\n  restoreMocks: false,\n  roots: ['<rootDir>'],\n  snapshotSerializers: [],\n  testEnvironment: 'jest-environment-node',\n  testPathIgnorePatterns: [NODE_MODULES_REGEXP],\n  testRegex: '(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$',\n  testResultsProcessor: null,\n  transformIgnorePatterns: [NODE_MODULES_REGEXP],\n  useStderr: false,\n  verbose: null,\n  watch: false,\n  watchPathIgnorePatterns: [],\n};\n\nconst validConfig = {\n  automock: false,\n  bail: 0,\n  cache: true,\n  cacheDirectory: '/tmp/user/jest',\n  clearMocks: false,\n  collectCoverage: true,\n  collectCoverageFrom: ['src', '!public'],\n  coverageDirectory: 'coverage',\n  coveragePathIgnorePatterns: [NODE_MODULES_REGEXP],\n  coverageReporters: ['json', 'text', 'lcov', 'clover'],\n  coverageThreshold: {\n    global: {\n      branches: 50,\n    },\n  },\n  expand: false,\n  fakeTimers: {enableGlobally: false},\n  forceExit: false,\n  globals: {},\n  haste: {},\n  id: 'string',\n  logHeapUsage: true,\n  moduleDirectories: ['node_modules'],\n  moduleFileExtensions: ['js', 'json', 'jsx', 'node'],\n  moduleNameMapper: {\n    '^React$': '<rootDir>/node_modules/react',\n    '^Vue$': ['<rootDir>/node_modules/vue', '<rootDir>/node_modules/vue3'],\n  },\n  modulePathIgnorePatterns: ['<rootDir>/build/'],\n  modulePaths: ['/shared/vendor/modules'],\n  noStackTrace: false,\n  notify: false,\n  notifyMode: 'failure-change',\n  preset: 'react-native',\n  prettierPath: '<rootDir>/node_modules/prettier',\n  resetMocks: false,\n  resetModules: false,\n  restoreMocks: false,\n  rootDir: '/',\n  roots: ['<rootDir>'],\n  runtime: '<rootDir>',\n  setupFiles: ['<rootDir>/setup.js'],\n  setupFilesAfterEnv: ['<rootDir>/testSetupFile.js'],\n  silent: true,\n  snapshotSerializers: ['my-serializer-module'],\n  testEnvironment: 'jest-environment-node',\n  testNamePattern: 'test signature',\n  testPathIgnorePatterns: [NODE_MODULES_REGEXP],\n  testRegex: '(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$',\n  testResultsProcessor: 'processor-node-module',\n  testRunner: 'circus',\n  transform: {\n    '\\\\.js$': '<rootDir>/preprocessor.js',\n  },\n  transformIgnorePatterns: [NODE_MODULES_REGEXP],\n  unmockedModulePathPatterns: ['mock'],\n  updateSnapshot: true,\n  useStderr: false,\n  verbose: false,\n  watch: false,\n  watchPathIgnorePatterns: [],\n  watchman: true,\n};\n\nconst format = (value: string) =>\n  require('pretty-format').format(value, {min: true});\n\nconst deprecatedConfig = {\n  preprocessorIgnorePatterns: (config: Record<string, any>) =>\n    `  Option ${chalk.bold(\n      'preprocessorIgnorePatterns',\n    )} was replaced by ${chalk.bold(\n      'transformIgnorePatterns',\n    )}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${chalk.bold('\"transformIgnorePatterns\"')}: ${chalk.bold(\n      `${format(config.preprocessorIgnorePatterns)}`,\n    )}\n  }\n\n  Please update your configuration.`,\n\n  scriptPreprocessor: (config: Record<string, any>) =>\n    `  Option ${chalk.bold('scriptPreprocessor')} was replaced by ${chalk.bold(\n      'transform',\n    )}, which support multiple preprocessors.\n\n  Jest now treats your current configuration as:\n  {\n    ${chalk.bold('\"transform\"')}: ${chalk.bold(\n      `{\".*\": ${format(config.scriptPreprocessor)}}`,\n    )}\n  }\n\n  Please update your configuration.`,\n};\n\nmodule.exports = {\n  defaultConfig,\n  deprecatedConfig,\n  validConfig,\n};\n","/Users/simen/repos/jest/packages/jest-validate/src/__tests__/validate.test.ts",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport {multipleValidOptions} from '../condition';\nimport jestValidateDefaultConfig from '../defaultConfig';\nimport jestValidateExampleConfig from '../exampleConfig';\nimport validate from '../validate';\nconst {\n  defaultConfig,\n  validConfig,\n  deprecatedConfig,\n} = require('./fixtures/jestConfig');\n\ntest('recursively validates default Jest config', () => {\n  expect(\n    validate(defaultConfig, {\n      exampleConfig: validConfig,\n    }),\n  ).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n});\n\ntest('recursively validates default jest-validate config', () => {\n  expect(\n    validate(jestValidateDefaultConfig, {\n      exampleConfig: jestValidateExampleConfig,\n    }),\n  ).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n});\n\ntest.each([\n  ['Boolean', {automock: []}],\n  ['Array', {coverageReporters: {}}],\n  ['String', {preset: 1337}],\n  ['Object', {haste: 42}],\n])('pretty prints valid config for %s', (type, config) => {\n  expect(() =>\n    validate(config, {\n      exampleConfig: validConfig,\n    }),\n  ).toThrowErrorMatchingSnapshot();\n});\n\ntest('pretty prints valid config for Function', () => {\n  const config = {fn: 'test'};\n  const validConfig = {fn: (_config, _option, _deprecatedOptions) => true};\n  expect(() =>\n    validate(config, {\n      exampleConfig: validConfig,\n    }),\n  ).toThrowErrorMatchingSnapshot();\n});\n\ntest('omits null and undefined config values', () => {\n  const config = {\n    haste: undefined,\n    preset: null,\n  };\n  expect(validate(config, {exampleConfig: validConfig})).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n});\n\ntest('recursively omits null and undefined config values', () => {\n  const config = {\n    coverageThreshold: {\n      global: null,\n    },\n  };\n  expect(\n    validate(config, {exampleConfig: validConfig, recursive: true}),\n  ).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n});\n\ntest.each([\n  [function () {}, function () {}],\n  [async function () {}, function () {}],\n  [function () {}, async function () {}],\n  [async function () {}, async function () {}],\n])(\n  'treat async and non-async functions as equivalent',\n  (value, exampleValue) => {\n    expect(\n      validate({name: value}, {exampleConfig: {name: exampleValue}}),\n    ).toEqual({hasDeprecationWarnings: false, isValid: true});\n  },\n);\n\ntest('respects recursiveDenylist', () => {\n  const warn = console.warn;\n  console.warn = jest.fn();\n  const config = {\n    something: {\n      nested: {\n        some_random_key: 'value',\n        some_random_key2: 'value2',\n      },\n    },\n  };\n  const exampleConfig = {\n    something: {\n      nested: {\n        test: true,\n      },\n    },\n  };\n\n  validate(config, {exampleConfig});\n\n  expect(console.warn).toHaveBeenCalled();\n\n  console.warn.mockReset();\n\n  validate(config, {\n    exampleConfig,\n    recursiveDenylist: ['something.nested'],\n  });\n\n  expect(console.warn).not.toHaveBeenCalled();\n  console.warn = warn;\n});\n\ntest('displays warning for unknown config options', () => {\n  const config = {unkwon: {}};\n  const validConfig = {unknown: 'string'};\n  const warn = console.warn;\n  console.warn = jest.fn();\n\n  validate(config, {exampleConfig: validConfig});\n\n  expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n  console.warn = warn;\n});\n\ntest('displays warning for deprecated config options', () => {\n  const config = {scriptPreprocessor: 'test'};\n  const warn = console.warn;\n  console.warn = jest.fn();\n\n  expect(\n    validate(config, {\n      deprecatedConfig,\n      exampleConfig: validConfig,\n    }),\n  ).toEqual({\n    hasDeprecationWarnings: true,\n    isValid: true,\n  });\n\n  expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n  console.warn = warn;\n});\n\ntest('works with custom warnings', () => {\n  const config = {unknown: 'string'};\n  const validConfig = {test: [1, 2]};\n  const warn = console.warn;\n  const options = {\n    comment: 'My custom comment',\n    deprecatedConfig,\n    exampleConfig: validConfig,\n    title: {\n      warning: 'My Custom Warning',\n    },\n  };\n  console.warn = jest.fn();\n\n  validate(config, options);\n\n  expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n  console.warn = warn;\n});\n\ntest('works with custom errors', () => {\n  const config = {test: 'string'};\n  const validConfig = {test: [1, 2]};\n  const options = {\n    comment: 'My custom comment',\n    deprecatedConfig,\n    exampleConfig: validConfig,\n    title: {\n      error: 'My Custom Error',\n    },\n  };\n\n  expect(() => validate(config, options)).toThrowErrorMatchingSnapshot();\n});\n\ntest('works with custom deprecations', () => {\n  const config = {scriptPreprocessor: 'test'};\n  const warn = console.warn;\n  const options = {\n    comment: 'My custom comment',\n    deprecatedConfig,\n    exampleConfig: validConfig,\n    title: {\n      deprecation: 'My Custom Deprecation Warning',\n    },\n  };\n  console.warn = jest.fn();\n\n  validate(config, options);\n\n  expect(console.warn.mock.calls[0][0]).toMatchSnapshot();\n  console.warn = warn;\n});\n\ntest('works with multiple valid types', () => {\n  const exampleConfig = {\n    foo: multipleValidOptions('text', ['text']),\n  };\n\n  expect(\n    validate(\n      {foo: 'foo'},\n      {\n        exampleConfig,\n      },\n    ),\n  ).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n  expect(\n    validate(\n      {foo: ['foo']},\n      {\n        exampleConfig,\n      },\n    ),\n  ).toEqual({\n    hasDeprecationWarnings: false,\n    isValid: true,\n  });\n});\n\ntest('reports errors nicely when failing with multiple valid options', () => {\n  const exampleConfig = {\n    foo: multipleValidOptions('text', ['text']),\n  };\n\n  expect(() =>\n    validate(\n      {foo: 2},\n      {\n        exampleConfig,\n      },\n    ),\n  ).toThrowErrorMatchingSnapshot();\n});\n\ntest('Repeated types within multiple valid examples are coalesced in error report', () => {\n  const exampleConfig = {\n    foo: multipleValidOptions('foo', 'bar', 2),\n  };\n\n  expect(() =>\n    validate(\n      {foo: false},\n      {\n        exampleConfig,\n      },\n    ),\n  ).toThrowErrorMatchingSnapshot();\n});\n\ntest('Comments in config JSON using \"//\" key are not warned', () => {\n  jest.spyOn(console, 'warn').mockImplementation(() => {});\n  const config = {'//': 'a comment'};\n\n  validate(config, {\n    exampleConfig: validConfig,\n  });\n  expect(console.warn).not.toHaveBeenCalled();\n\n  console.warn.mockReset();\n\n  validate(config, {\n    exampleConfig: validConfig,\n    recursiveDenylist: ['myCustomKey' as \"don't validate this\"],\n  });\n  expect(console.warn).not.toHaveBeenCalled();\n\n  console.warn.mockRestore();\n});\n","/Users/simen/repos/jest/packages/jest-validate/src/condition.ts",["104","105","106"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst toString = Object.prototype.toString;\n\nconst MULTIPLE_VALID_OPTIONS_SYMBOL = Symbol('JEST_MULTIPLE_VALID_OPTIONS');\n\nfunction validationConditionSingle(\n  option: unknown,\n  validOption: unknown,\n): boolean {\n  return (\n    option === null ||\n    option === undefined ||\n    (typeof option === 'function' && typeof validOption === 'function') ||\n    toString.call(option) === toString.call(validOption)\n  );\n}\n\nexport function getValues<T = unknown>(validOption: T): Array<T> {\n  if (\n    Array.isArray(validOption) &&\n    // @ts-expect-error: no index signature\n    validOption[MULTIPLE_VALID_OPTIONS_SYMBOL]\n  ) {\n    return validOption;\n  }\n  return [validOption];\n}\n\nexport function validationCondition(\n  option: unknown,\n  validOption: unknown,\n): boolean {\n  return getValues(validOption).some(e => validationConditionSingle(option, e));\n}\n\nexport function multipleValidOptions<T extends Array<unknown>>(\n  ...args: T\n): T[number] {\n  const options = <T>[...args];\n  // @ts-expect-error: no index signature\n  options[MULTIPLE_VALID_OPTIONS_SYMBOL] = true;\n\n  return options;\n}\n","/Users/simen/repos/jest/packages/jest-validate/src/defaultConfig.ts",[],[],"/Users/simen/repos/jest/packages/jest-validate/src/deprecated.ts",["107"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type {DeprecatedOptions, ValidationOptions} from './types';\nimport {DEPRECATION, logValidationWarning} from './utils';\n\nconst deprecationMessage = (message: string, options: ValidationOptions) => {\n  const comment = options.comment;\n  const name = (options.title && options.title.deprecation) || DEPRECATION;\n\n  logValidationWarning(name, message, comment);\n};\n\nexport const deprecationWarning = (\n  config: Record<string, unknown>,\n  option: string,\n  deprecatedOptions: DeprecatedOptions,\n  options: ValidationOptions,\n): boolean => {\n  if (option in deprecatedOptions) {\n    deprecationMessage(deprecatedOptions[option](config), options);\n\n    return true;\n  }\n\n  return false;\n};\n","/Users/simen/repos/jest/packages/jest-validate/src/errors.ts",["108"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport chalk = require('chalk');\nimport {getType} from 'jest-get-type';\nimport {getValues} from './condition';\nimport type {ValidationOptions} from './types';\nimport {ERROR, ValidationError, formatPrettyObject} from './utils';\n\nexport const errorMessage = (\n  option: string,\n  received: unknown,\n  defaultValue: unknown,\n  options: ValidationOptions,\n  path?: Array<string>,\n): void => {\n  const conditions = getValues(defaultValue);\n  const validTypes: Array<string> = Array.from(\n    new Set(conditions.map(getType)),\n  );\n\n  const message = `  Option ${chalk.bold(\n    `\"${path && path.length > 0 ? `${path.join('.')}.` : ''}${option}\"`,\n  )} must be of type:\n    ${validTypes.map(e => chalk.bold.green(e)).join(' or ')}\n  but instead received:\n    ${chalk.bold.red(getType(received))}\n\n  Example:\n${formatExamples(option, conditions)}`;\n\n  const comment = options.comment;\n  const name = (options.title && options.title.error) || ERROR;\n\n  throw new ValidationError(name, message, comment);\n};\n\nfunction formatExamples(option: string, examples: Array<unknown>) {\n  return examples.map(\n    e => `  {\n    ${chalk.bold(`\"${option}\"`)}: ${chalk.bold(formatPrettyObject(e))}\n  }`,\n  ).join(`\n\n  or\n\n`);\n}\n","/Users/simen/repos/jest/packages/jest-validate/src/exampleConfig.ts",[],["109","110"],"/Users/simen/repos/jest/packages/jest-validate/src/index.ts",[],[],"/Users/simen/repos/jest/packages/jest-validate/src/types.ts",[],[],"/Users/simen/repos/jest/packages/jest-validate/src/utils.ts",["111","112","113"],["114"],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport chalk = require('chalk');\nimport leven from 'leven';\nimport {format as prettyFormat} from 'pretty-format';\n\nconst BULLET: string = chalk.bold('\\u25cf');\nexport const DEPRECATION = `${BULLET} Deprecation Warning`;\nexport const ERROR = `${BULLET} Validation Error`;\nexport const WARNING = `${BULLET} Validation Warning`;\n\nexport const format = (value: unknown): string =>\n  typeof value === 'function'\n    ? value.toString()\n    : prettyFormat(value, {min: true});\n\nexport const formatPrettyObject = (value: unknown): string =>\n  typeof value === 'function'\n    ? value.toString()\n    : JSON.stringify(value, null, 2).split('\\n').join('\\n    ');\n\nexport class ValidationError extends Error {\n  override name: string;\n  override message: string;\n\n  constructor(name: string, message: string, comment?: string | null) {\n    super();\n    comment = comment ? `\\n\\n${comment}` : '\\n';\n    this.name = '';\n    this.message = chalk.red(`${chalk.bold(name)}:\\n\\n${message}${comment}`);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    Error.captureStackTrace(this, () => {});\n  }\n}\n\nexport const logValidationWarning = (\n  name: string,\n  message: string,\n  comment?: string | null,\n): void => {\n  comment = comment ? `\\n\\n${comment}` : '\\n';\n  console.warn(chalk.yellow(`${chalk.bold(name)}:\\n\\n${message}${comment}`));\n};\n\nexport const createDidYouMeanMessage = (\n  unrecognized: string,\n  allowedOptions: Array<string>,\n): string => {\n  const suggestion = allowedOptions.find(option => {\n    const steps: number = leven(option, unrecognized);\n    return steps < 3;\n  });\n\n  return suggestion ? `Did you mean ${chalk.bold(format(suggestion))}?` : '';\n};\n","/Users/simen/repos/jest/packages/jest-validate/src/validate.ts",["115","116","117","118","119","120","121","122"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport defaultConfig from './defaultConfig';\nimport type {ValidationOptions} from './types';\nimport {ValidationError} from './utils';\n\nlet hasDeprecationWarnings = false;\n\nconst shouldSkipValidationForPath = (\n  path: Array<string>,\n  key: string,\n  denylist?: Array<string>,\n) => (denylist ? denylist.includes([...path, key].join('.')) : false);\n\nconst _validate = (\n  config: Record<string, any>,\n  exampleConfig: Record<string, any>,\n  options: ValidationOptions,\n  path: Array<string> = [],\n): {hasDeprecationWarnings: boolean} => {\n  if (\n    typeof config !== 'object' ||\n    config == null ||\n    typeof exampleConfig !== 'object' ||\n    exampleConfig == null\n  ) {\n    return {hasDeprecationWarnings};\n  }\n\n  for (const key in config) {\n    if (\n      options.deprecatedConfig &&\n      key in options.deprecatedConfig &&\n      typeof options.deprecate === 'function'\n    ) {\n      const isDeprecatedKey = options.deprecate(\n        config,\n        key,\n        options.deprecatedConfig,\n        options,\n      );\n\n      hasDeprecationWarnings = hasDeprecationWarnings || isDeprecatedKey;\n    } else if (allowsMultipleTypes(key)) {\n      const value = config[key];\n\n      if (\n        typeof options.condition === 'function' &&\n        typeof options.error === 'function'\n      ) {\n        if (key === 'maxWorkers' && !isOfTypeStringOrNumber(value)) {\n          throw new ValidationError(\n            'Validation Error',\n            `${key} has to be of type string or number`,\n            'maxWorkers=50% or\\nmaxWorkers=3',\n          );\n        }\n      }\n    } else if (Object.hasOwnProperty.call(exampleConfig, key)) {\n      if (\n        typeof options.condition === 'function' &&\n        typeof options.error === 'function' &&\n        !options.condition(config[key], exampleConfig[key])\n      ) {\n        options.error(key, config[key], exampleConfig[key], options, path);\n      }\n    } else if (\n      shouldSkipValidationForPath(path, key, options.recursiveDenylist)\n    ) {\n      // skip validating unknown options inside blacklisted paths\n    } else {\n      options.unknown &&\n        options.unknown(config, exampleConfig, key, options, path);\n    }\n\n    if (\n      options.recursive &&\n      !Array.isArray(exampleConfig[key]) &&\n      options.recursiveDenylist &&\n      !shouldSkipValidationForPath(path, key, options.recursiveDenylist)\n    ) {\n      _validate(config[key], exampleConfig[key], options, [...path, key]);\n    }\n  }\n\n  return {hasDeprecationWarnings};\n};\n\nconst allowsMultipleTypes = (key: string): boolean => key === 'maxWorkers';\nconst isOfTypeStringOrNumber = (value: unknown): boolean =>\n  typeof value === 'number' || typeof value === 'string';\n\nconst validate = (\n  config: Record<string, unknown>,\n  options: ValidationOptions,\n): {hasDeprecationWarnings: boolean; isValid: boolean} => {\n  hasDeprecationWarnings = false;\n\n  // Preserve default denylist entries even with user-supplied denylist\n  const combinedDenylist: Array<string> = [\n    ...(defaultConfig.recursiveDenylist || []),\n    ...(options.recursiveDenylist || []),\n  ];\n\n  const defaultedOptions: ValidationOptions = Object.assign({\n    ...defaultConfig,\n    ...options,\n    recursiveDenylist: combinedDenylist,\n    title: options.title || defaultConfig.title,\n  });\n\n  const {hasDeprecationWarnings: hdw} = _validate(\n    config,\n    options.exampleConfig,\n    defaultedOptions,\n  );\n\n  return {\n    hasDeprecationWarnings: hdw,\n    isValid: true,\n  };\n};\n\nexport default validate;\n","/Users/simen/repos/jest/packages/jest-validate/src/validateCLIOptions.ts",["123","124"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport camelcase = require('camelcase');\nimport chalk = require('chalk');\nimport type {Options} from 'yargs';\nimport type {Config} from '@jest/types';\nimport defaultConfig from './defaultConfig';\nimport {deprecationWarning} from './deprecated';\nimport type {DeprecatedOptionFunc, DeprecatedOptions} from './types';\nimport {ValidationError, createDidYouMeanMessage, format} from './utils';\n\nconst BULLET: string = chalk.bold('\\u25cf');\nexport const DOCUMENTATION_NOTE = `  ${chalk.bold('CLI Options Documentation:')}\n  https://jestjs.io/docs/cli\n`;\n\nconst createCLIValidationError = (\n  unrecognizedOptions: Array<string>,\n  allowedOptions: Set<string>,\n) => {\n  let title = `${BULLET} Unrecognized CLI Parameter`;\n  let message;\n  const comment =\n    `  ${chalk.bold('CLI Options Documentation')}:\\n` +\n    '  https://jestjs.io/docs/cli\\n';\n\n  if (unrecognizedOptions.length === 1) {\n    const unrecognized = unrecognizedOptions[0];\n    const didYouMeanMessage =\n      unrecognized.length > 1\n        ? createDidYouMeanMessage(unrecognized, Array.from(allowedOptions))\n        : '';\n    message = `  Unrecognized option ${chalk.bold(format(unrecognized))}.${\n      didYouMeanMessage ? ` ${didYouMeanMessage}` : ''\n    }`;\n  } else {\n    title += 's';\n    message =\n      '  Following options were not recognized:\\n' +\n      `  ${chalk.bold(format(unrecognizedOptions))}`;\n  }\n\n  return new ValidationError(title, message, comment);\n};\n\nconst logDeprecatedOptions = (\n  deprecatedOptions: Array<string>,\n  deprecationEntries: DeprecatedOptions,\n  argv: Config.Argv,\n) => {\n  deprecatedOptions.forEach(opt => {\n    deprecationWarning(argv, opt, deprecationEntries, {\n      ...defaultConfig,\n      comment: DOCUMENTATION_NOTE,\n    });\n  });\n};\n\nexport default function validateCLIOptions(\n  argv: Config.Argv,\n  options: {\n    deprecationEntries: DeprecatedOptions;\n    [s: string]: Options;\n  },\n  rawArgv: Array<string> = [],\n): boolean {\n  const yargsSpecialOptions = ['$0', '_', 'help', 'h'];\n  const deprecationEntries = options.deprecationEntries || {};\n  const allowedOptions = Object.keys(options).reduce(\n    (acc, option) =>\n      acc.add(option).add((options[option].alias as string) || option),\n    new Set(yargsSpecialOptions),\n  );\n  const unrecognizedOptions = Object.keys(argv).filter(\n    arg =>\n      !allowedOptions.has(camelcase(arg, {locale: 'en-US'})) &&\n      !allowedOptions.has(arg) &&\n      (!rawArgv.length || rawArgv.includes(arg)),\n    [],\n  );\n\n  if (unrecognizedOptions.length) {\n    throw createCLIValidationError(unrecognizedOptions, allowedOptions);\n  }\n\n  const CLIDeprecations = Object.keys(deprecationEntries).reduce<\n    Record<string, DeprecatedOptionFunc>\n  >((acc, entry) => {\n    if (options[entry]) {\n      acc[entry] = deprecationEntries[entry];\n      const alias = options[entry].alias as string;\n      if (alias) {\n        acc[alias] = deprecationEntries[entry];\n      }\n    }\n    return acc;\n  }, {});\n  const deprecations = new Set(Object.keys(CLIDeprecations));\n  const deprecatedOptions = Object.keys(argv).filter(\n    arg => deprecations.has(arg) && argv[arg] != null,\n  );\n\n  if (deprecatedOptions.length) {\n    logDeprecatedOptions(deprecatedOptions, CLIDeprecations, argv);\n  }\n\n  return true;\n}\n","/Users/simen/repos/jest/packages/jest-validate/src/warnings.ts",["125"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport chalk = require('chalk');\nimport type {ValidationOptions} from './types';\nimport {\n  WARNING,\n  createDidYouMeanMessage,\n  format,\n  logValidationWarning,\n} from './utils';\n\nexport const unknownOptionWarning = (\n  config: Record<string, unknown>,\n  exampleConfig: Record<string, unknown>,\n  option: string,\n  options: ValidationOptions,\n  path?: Array<string>,\n): void => {\n  const didYouMean = createDidYouMeanMessage(\n    option,\n    Object.keys(exampleConfig),\n  );\n  const message = `  Unknown option ${chalk.bold(\n    `\"${path && path.length > 0 ? `${path.join('.')}.` : ''}${option}\"`,\n  )} with value ${chalk.bold(format(config[option]))} was found.${\n    didYouMean && ` ${didYouMean}`\n  }\\n  This is probably a typing mistake. Fixing it will remove this message.`;\n\n  const comment = options.comment;\n  const name = (options.title && options.title.warning) || WARNING;\n\n  logValidationWarning(name, message, comment);\n};\n",{"ruleId":"126","severity":2,"message":"127","line":124,"column":3,"nodeType":"128","messageId":"129","endLine":124,"endColumn":54},{"ruleId":"130","severity":2,"message":"131","line":124,"column":3,"nodeType":"132","messageId":"133","endLine":124,"endColumn":34},{"ruleId":"134","severity":2,"message":"135","line":124,"column":3,"nodeType":"132","messageId":"136","endLine":124,"endColumn":34},{"ruleId":"137","severity":2,"message":"138","line":137,"column":10,"nodeType":"128","messageId":"139","endLine":137,"endColumn":51},{"ruleId":"140","severity":2,"message":"141","line":137,"column":17,"nodeType":"132","messageId":"142","endLine":137,"endColumn":50},{"ruleId":"137","severity":2,"message":"138","line":151,"column":17,"nodeType":"128","messageId":"139","endLine":151,"endColumn":50},{"ruleId":"140","severity":2,"message":"141","line":151,"column":24,"nodeType":"132","messageId":"142","endLine":151,"endColumn":49},{"ruleId":"143","severity":2,"message":"144","line":13,"column":7,"nodeType":"145","messageId":"146","endLine":17,"endColumn":37},{"ruleId":"140","severity":2,"message":"147","line":21,"column":14,"nodeType":"148","messageId":"142","endLine":21,"endColumn":27},{"ruleId":"143","severity":2,"message":"144","line":22,"column":7,"nodeType":"149","messageId":"146","endLine":22,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":49,"column":7,"nodeType":"149","messageId":"146","endLine":49,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":69,"column":28,"nodeType":"149","messageId":"146","endLine":69,"endColumn":54},{"ruleId":"143","severity":2,"message":"144","line":82,"column":23,"nodeType":"149","messageId":"146","endLine":82,"endColumn":49},{"ruleId":"134","severity":2,"message":"135","line":126,"column":3,"nodeType":"132","messageId":"136","endLine":126,"endColumn":25},{"ruleId":"130","severity":2,"message":"150","line":145,"column":10,"nodeType":"132","messageId":"133","endLine":145,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":156,"column":7,"nodeType":"149","messageId":"146","endLine":156,"endColumn":23},{"ruleId":"143","severity":2,"message":"144","line":157,"column":7,"nodeType":"149","messageId":"146","endLine":157,"endColumn":33},{"ruleId":"130","severity":2,"message":"150","line":164,"column":10,"nodeType":"132","messageId":"133","endLine":164,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":174,"column":5,"nodeType":"149","messageId":"146","endLine":174,"endColumn":21},{"ruleId":"130","severity":2,"message":"150","line":184,"column":10,"nodeType":"132","messageId":"133","endLine":184,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":193,"column":5,"nodeType":"149","messageId":"146","endLine":193,"endColumn":21},{"ruleId":"143","severity":2,"message":"144","line":208,"column":5,"nodeType":"149","messageId":"146","endLine":208,"endColumn":21},{"ruleId":"143","severity":2,"message":"144","line":209,"column":5,"nodeType":"149","messageId":"146","endLine":209,"endColumn":31},{"ruleId":"130","severity":2,"message":"150","line":218,"column":10,"nodeType":"132","messageId":"133","endLine":218,"endColumn":33},{"ruleId":"143","severity":2,"message":"144","line":286,"column":5,"nodeType":"149","messageId":"146","endLine":286,"endColumn":31},{"ruleId":"134","severity":2,"message":"135","line":290,"column":3,"nodeType":"132","messageId":"136","endLine":290,"endColumn":25},{"ruleId":"143","severity":2,"message":"144","line":293,"column":5,"nodeType":"149","messageId":"146","endLine":293,"endColumn":31},{"ruleId":"134","severity":2,"message":"135","line":298,"column":3,"nodeType":"132","messageId":"136","endLine":298,"endColumn":27},{"ruleId":"151","severity":2,"message":"152","line":8,"column":18,"nodeType":"132","messageId":"153","endLine":8,"endColumn":43},{"ruleId":"154","severity":2,"message":"155","line":28,"column":5,"nodeType":"132","messageId":"156","endLine":28,"endColumn":47,"suggestions":"157"},{"ruleId":"126","severity":2,"message":"158","line":30,"column":5,"nodeType":"159","messageId":"160","endLine":30,"endColumn":24},{"ruleId":"154","severity":2,"message":"161","line":13,"column":34,"nodeType":"132","messageId":"162","endLine":13,"endColumn":59,"suggestions":"163"},{"ruleId":"154","severity":2,"message":"161","line":37,"column":34,"nodeType":"132","messageId":"162","endLine":37,"endColumn":53,"suggestions":"164"},{"ruleId":"165","severity":2,"message":"166","line":18,"column":16,"nodeType":"167","messageId":"168","endLine":18,"endColumn":18,"suppressions":"169"},{"ruleId":"165","severity":2,"message":"170","line":28,"column":18,"nodeType":"167","messageId":"168","endLine":28,"endColumn":20,"suppressions":"171"},{"ruleId":"154","severity":2,"message":"161","line":33,"column":15,"nodeType":"148","messageId":"162","endLine":33,"endColumn":22,"suggestions":"172"},{"ruleId":"154","severity":2,"message":"161","line":46,"column":13,"nodeType":"148","messageId":"162","endLine":46,"endColumn":20,"suggestions":"173"},{"ruleId":"154","severity":2,"message":"161","line":59,"column":10,"nodeType":"148","messageId":"162","endLine":59,"endColumn":20,"suggestions":"174"},{"ruleId":"165","severity":2,"message":"175","line":37,"column":41,"nodeType":"167","messageId":"168","endLine":37,"endColumn":43,"suppressions":"176"},{"ruleId":"143","severity":2,"message":"144","line":50,"column":13,"nodeType":"145","messageId":"146","endLine":50,"endColumn":32},{"ruleId":"154","severity":2,"message":"177","line":82,"column":7,"nodeType":"132","messageId":"178","endLine":82,"endColumn":24,"suggestions":"179"},{"ruleId":"140","severity":2,"message":"180","line":87,"column":17,"nodeType":"132","messageId":"142","endLine":87,"endColumn":28},{"ruleId":"140","severity":2,"message":"180","line":87,"column":30,"nodeType":"132","messageId":"142","endLine":87,"endColumn":48},{"ruleId":"181","severity":2,"message":"182","line":106,"column":41,"nodeType":"183","messageId":"184","endLine":106,"endColumn":43,"suggestions":"185"},{"ruleId":"181","severity":2,"message":"182","line":107,"column":35,"nodeType":"183","messageId":"184","endLine":107,"endColumn":37,"suggestions":"186"},{"ruleId":"143","severity":2,"message":"144","line":110,"column":9,"nodeType":"145","messageId":"146","endLine":115,"endColumn":5},{"ruleId":"181","severity":2,"message":"182","line":114,"column":26,"nodeType":"183","messageId":"184","endLine":114,"endColumn":28,"suggestions":"187"},{"ruleId":"154","severity":2,"message":"188","line":73,"column":30,"nodeType":"132","messageId":"189","endLine":73,"endColumn":56},{"ruleId":"154","severity":2,"message":"188","line":94,"column":9,"nodeType":"132","messageId":"189","endLine":94,"endColumn":23},{"ruleId":"154","severity":2,"message":"161","line":35,"column":34,"nodeType":"132","messageId":"162","endLine":35,"endColumn":55,"suggestions":"190"},"@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","CallExpression","unsafeReturn","@typescript-eslint/no-unsafe-member-access","Unsafe member access .format on an `any` value.","MemberExpression","unsafeMemberExpression","@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","unsafeCall","@typescript-eslint/restrict-template-expressions","Invalid type \"any\" of template literal expression.","invalidType","@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string`.","unsafeArgument","@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment","Unsafe argument of type `any` assigned to a parameter of type `Record<string, unknown>`.","Identifier","Property","Unsafe member access .calls on an `any` value.","@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","unboundWithoutThisAnnotation","@typescript-eslint/strict-boolean-expressions","Unexpected any value in conditional. An explicit comparison or type cast is required.","conditionErrorAny",["191"],"Unsafe return of type `any[]` from function with return type `T[]`.","ReturnStatement","unsafeReturnAssignment","Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","conditionErrorNullableString",["192","193","194"],["195","196","197"],"@typescript-eslint/no-empty-function","Unexpected empty method 'error'.","ArrowFunctionExpression","unexpected",["198"],"Unexpected empty method 'unknown'.",["199"],["200","201","202"],["203","204","205"],["206","207","208"],"Unexpected empty arrow function.",["209"],"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","conditionErrorNullableBoolean",["210","211"],"Unsafe argument of type `any` assigned to a parameter of type `Record<string, any>`.","@typescript-eslint/prefer-nullish-coalescing","Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","Punctuator","preferNullishOverOr",["212"],["213"],["214"],"Unexpected object value in conditional. The condition is always true.","conditionErrorObject",["215","216","217"],{"messageId":"218","fix":"219","desc":"220"},{"messageId":"221","fix":"222","desc":"223"},{"messageId":"224","fix":"225","desc":"226"},{"messageId":"218","fix":"227","desc":"220"},{"messageId":"221","fix":"228","desc":"223"},{"messageId":"224","fix":"229","desc":"226"},{"messageId":"218","fix":"230","desc":"220"},{"kind":"231","justification":"232"},{"kind":"231","justification":"232"},{"messageId":"221","fix":"233","desc":"223"},{"messageId":"224","fix":"234","desc":"226"},{"messageId":"218","fix":"235","desc":"220"},{"messageId":"221","fix":"236","desc":"223"},{"messageId":"224","fix":"237","desc":"226"},{"messageId":"218","fix":"238","desc":"220"},{"messageId":"221","fix":"239","desc":"223"},{"messageId":"224","fix":"240","desc":"226"},{"messageId":"218","fix":"241","desc":"220"},{"kind":"231","justification":"232"},{"messageId":"242","fix":"243","desc":"244"},{"messageId":"245","fix":"246","desc":"247"},{"messageId":"248","fix":"249","desc":"250"},{"messageId":"248","fix":"251","desc":"250"},{"messageId":"248","fix":"252","desc":"250"},{"messageId":"221","fix":"253","desc":"223"},{"messageId":"224","fix":"254","desc":"226"},{"messageId":"218","fix":"255","desc":"220"},"conditionFixCastBoolean",{"range":"256","text":"257"},"Explicitly cast value to a boolean (`Boolean(value)`)","conditionFixCompareNullish",{"range":"258","text":"259"},"Change condition to check for null/undefined (`value != null`)","conditionFixDefaultEmptyString",{"range":"258","text":"260"},"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",{"range":"258","text":"261"},{"range":"262","text":"263"},{"range":"262","text":"264"},{"range":"262","text":"265"},"directive","",{"range":"266","text":"267"},{"range":"266","text":"268"},{"range":"266","text":"269"},{"range":"270","text":"267"},{"range":"270","text":"268"},{"range":"270","text":"269"},{"range":"271","text":"272"},{"range":"271","text":"273"},{"range":"271","text":"274"},"conditionFixDefaultFalse",{"range":"275","text":"276"},"Explicitly treat nullish value the same as false (`value ?? false`)","conditionFixCompareTrue",{"range":"275","text":"277"},"Change condition to check if true (`value === true`)","suggestNullish",{"range":"278","text":"279"},"Fix to nullish coalescing operator (`??`).",{"range":"280","text":"279"},{"range":"281","text":"279"},{"range":"282","text":"283"},{"range":"282","text":"284"},{"range":"282","text":"285"},[784,826],"(Boolean(validOption[MULTIPLE_VALID_OPTIONS_SYMBOL]))",[484,509],"(options.title.deprecation != null)","(options.title.deprecation ?? \"\")","(Boolean(options.title.deprecation))",[1122,1141],"(options.title.error != null)","(options.title.error ?? \"\")","(Boolean(options.title.error))",[1061,1068],"(comment != null)","(comment ?? \"\")","(Boolean(comment))",[1440,1447],[1816,1826],"(suggestion != null)","(suggestion ?? \"\")","(Boolean(suggestion))",[2392,2409],"(options.recursive ?? false)","(options.recursive === true)",[3228,3230],"??",[3270,3272],[3450,3452],[1061,1082],"(options.title.warning != null)","(options.title.warning ?? \"\")","(Boolean(options.title.warning))"]