[{"/Users/simen/repos/jest/packages/jest-runner/src/__tests__/testRunner.test.ts":"1","/Users/simen/repos/jest/packages/jest-runner/src/index.ts":"2","/Users/simen/repos/jest/packages/jest-runner/src/runTest.ts":"3","/Users/simen/repos/jest/packages/jest-runner/src/testWorker.ts":"4","/Users/simen/repos/jest/packages/jest-runner/src/types.ts":"5"},{"size":2260,"mtime":1665737657506,"results":"6","hashOfConfig":"7"},{"size":6759,"mtime":1665737657506,"results":"8","hashOfConfig":"7"},{"size":11305,"mtime":1665737657506,"results":"9","hashOfConfig":"7"},{"size":2921,"mtime":1664535326141,"results":"10","hashOfConfig":"7"},{"size":3292,"mtime":1664535326141,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"nt2l0s",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":20,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/simen/repos/jest/packages/jest-runner/src/__tests__/testRunner.test.ts",["31","32","33","34","35","36"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport type {TestContext} from '@jest/test-result';\nimport {makeGlobalConfig, makeProjectConfig} from '@jest/test-utils';\nimport {TestWatcher} from 'jest-watcher';\nimport TestRunner from '../index';\n\nlet mockWorkerFarm;\n\njest.mock('jest-worker', () => ({\n  Worker: jest.fn(\n    worker =>\n      (mockWorkerFarm = {\n        end: jest.fn().mockResolvedValue({forceExited: false}),\n        getStderr: jest.fn(),\n        getStdout: jest.fn(),\n        worker: jest.fn((data, callback) => require(worker)(data, callback)),\n      }),\n  ),\n}));\n\njest.mock('../testWorker', () => {});\n\ntest('injects the serializable module map into each worker in watch mode', async () => {\n  const globalConfig = makeGlobalConfig({maxWorkers: 2, watch: true});\n  const config = makeProjectConfig({rootDir: '/path/'});\n  const runContext = {};\n  const mockTestContext = {\n    config,\n    moduleMap: {toJSON: jest.fn()},\n  } as unknown as TestContext;\n\n  await new TestRunner(globalConfig, runContext).runTests(\n    [\n      {context: mockTestContext, path: './file.test.js'},\n      {context: mockTestContext, path: './file2.test.js'},\n    ],\n    new TestWatcher({isWatchMode: globalConfig.watch}),\n    {serial: false},\n  );\n\n  expect(mockWorkerFarm.worker).toHaveBeenCalledTimes(2);\n\n  expect(mockWorkerFarm.worker).toHaveBeenNthCalledWith(1, {\n    config,\n    context: runContext,\n    globalConfig,\n    path: './file.test.js',\n  });\n\n  expect(mockWorkerFarm.worker).toHaveBeenNthCalledWith(2, {\n    config,\n    context: runContext,\n    globalConfig,\n    path: './file2.test.js',\n  });\n});\n\ntest('assign process.env.JEST_WORKER_ID = 1 when in runInBand mode', async () => {\n  const globalConfig = makeGlobalConfig({maxWorkers: 1, watch: false});\n  const config = makeProjectConfig({rootDir: '/path/'});\n  const context = {config} as TestContext;\n\n  await new TestRunner(globalConfig, {}).runTests(\n    [{context, path: './file.test.js'}],\n    new TestWatcher({isWatchMode: globalConfig.watch}),\n    {serial: true},\n  );\n\n  expect(process.env.JEST_WORKER_ID).toBe('1');\n});\n","/Users/simen/repos/jest/packages/jest-runner/src/index.ts",["37","38","39","40","41"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport chalk = require('chalk');\nimport Emittery = require('emittery');\nimport pLimit = require('p-limit');\nimport type {\n  Test,\n  TestEvents,\n  TestFileEvent,\n  TestResult,\n} from '@jest/test-result';\nimport {deepCyclicCopy} from 'jest-util';\nimport type {TestWatcher} from 'jest-watcher';\nimport {JestWorkerFarm, PromiseWithCustomMessage, Worker} from 'jest-worker';\nimport runTest from './runTest';\nimport type {SerializableResolver} from './testWorker';\nimport {EmittingTestRunner, TestRunnerOptions, UnsubscribeFn} from './types';\n\nexport type {Test, TestEvents} from '@jest/test-result';\nexport type {Config} from '@jest/types';\nexport type {TestWatcher} from 'jest-watcher';\nexport {CallbackTestRunner, EmittingTestRunner} from './types';\nexport type {\n  CallbackTestRunnerInterface,\n  EmittingTestRunnerInterface,\n  OnTestFailure,\n  OnTestStart,\n  OnTestSuccess,\n  TestRunnerContext,\n  TestRunnerOptions,\n  JestTestRunner,\n  UnsubscribeFn,\n} from './types';\n\ntype TestWorker = typeof import('./testWorker');\n\nexport default class TestRunner extends EmittingTestRunner {\n  readonly #eventEmitter = new Emittery<TestEvents>();\n\n  async runTests(\n    tests: Array<Test>,\n    watcher: TestWatcher,\n    options: TestRunnerOptions,\n  ): Promise<void> {\n    return options.serial\n      ? this.#createInBandTestRun(tests, watcher)\n      : this.#createParallelTestRun(tests, watcher);\n  }\n\n  async #createInBandTestRun(tests: Array<Test>, watcher: TestWatcher) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = pLimit(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              // `deepCyclicCopy` used here to avoid mem-leak\n              const sendMessageToJest: TestFileEvent = (eventName, args) =>\n                this.#eventEmitter.emit(\n                  eventName,\n                  deepCyclicCopy(args, {keepPrototype: false}),\n                );\n\n              await this.#eventEmitter.emit('test-file-start', [test]);\n\n              return runTest(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest,\n              );\n            })\n            .then(\n              result =>\n                this.#eventEmitter.emit('test-file-success', [test, result]),\n              error =>\n                this.#eventEmitter.emit('test-file-failure', [test, error]),\n            ),\n        ),\n      Promise.resolve(),\n    );\n  }\n\n  async #createParallelTestRun(tests: Array<Test>, watcher: TestWatcher) {\n    const resolvers: Map<string, SerializableResolver> = new Map();\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.id)) {\n        resolvers.set(test.context.config.id, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON(),\n        });\n      }\n    }\n\n    const worker = new Worker(require.resolve('./testWorker'), {\n      exposedMethods: ['worker'],\n      forkOptions: {serialization: 'json', stdio: 'pipe'},\n      // The workerIdleMemoryLimit should've been converted to a number during\n      // the normalization phase.\n      idleMemoryLimit:\n        typeof this._globalConfig.workerIdleMemoryLimit === 'number'\n          ? this._globalConfig.workerIdleMemoryLimit\n          : undefined,\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [{serializableResolvers: Array.from(resolvers.values())}],\n    }) as JestWorkerFarm<TestWorker>;\n\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n\n    const mutex = pLimit(this._globalConfig.maxWorkers);\n\n    // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n    const runTestInWorker = (test: Test) =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n\n        await this.#eventEmitter.emit('test-file-start', [test]);\n\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles),\n          },\n          globalConfig: this._globalConfig,\n          path: test.path,\n        }) as PromiseWithCustomMessage<TestResult>;\n\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]: any) =>\n            this.#eventEmitter.emit(event, payload),\n          );\n        }\n\n        return promise;\n      });\n\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test).then(\n          result =>\n            this.#eventEmitter.emit('test-file-success', [test, result]),\n          error => this.#eventEmitter.emit('test-file-failure', [test, error]),\n        ),\n      ),\n    );\n\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n      if (forceExited) {\n        console.error(\n          chalk.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.',\n          ),\n        );\n      }\n    };\n\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n\n  on<Name extends keyof TestEvents>(\n    eventName: Name,\n    listener: (eventData: TestEvents[Name]) => void | Promise<void>,\n  ): UnsubscribeFn {\n    return this.#eventEmitter.on(eventName, listener);\n  }\n}\n\nclass CancelRun extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n","/Users/simen/repos/jest/packages/jest-runner/src/runTest.ts",["42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport chalk = require('chalk');\nimport * as fs from 'graceful-fs';\nimport sourcemapSupport = require('source-map-support');\nimport {\n  BufferedConsole,\n  CustomConsole,\n  LogMessage,\n  LogType,\n  NullConsole,\n  getConsoleOutput,\n} from '@jest/console';\nimport type {JestEnvironment} from '@jest/environment';\nimport type {TestFileEvent, TestResult} from '@jest/test-result';\nimport {createScriptTransformer} from '@jest/transform';\nimport type {Config} from '@jest/types';\nimport * as docblock from 'jest-docblock';\nimport LeakDetector from 'jest-leak-detector';\nimport {formatExecError} from 'jest-message-util';\nimport Resolver, {resolveTestEnvironment} from 'jest-resolve';\nimport type RuntimeClass from 'jest-runtime';\nimport {ErrorWithStack, interopRequireDefault, setGlobal} from 'jest-util';\nimport type {TestFramework, TestRunnerContext} from './types';\n\ntype RunTestInternalResult = {\n  leakDetector: LeakDetector | null;\n  result: TestResult;\n};\n\nfunction freezeConsole(\n  testConsole: BufferedConsole | CustomConsole | NullConsole,\n  config: Config.ProjectConfig,\n) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(\n    _type: LogType,\n    message: LogMessage,\n  ) {\n    const error = new ErrorWithStack(\n      `${chalk.red(\n        `${chalk.bold(\n          'Cannot log after tests are done.',\n        )} Did you forget to wait for something async in your test?`,\n      )}\\nAttempted to log \"${message}\".`,\n      fakeConsolePush,\n    );\n\n    const formattedError = formatExecError(\n      error,\n      config,\n      {noStackTrace: false},\n      undefined,\n      true,\n    );\n\n    process.stderr.write(`\\n${formattedError}\\n`);\n    process.exitCode = 1;\n  };\n}\n\n// Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\nasync function runTestInternal(\n  path: string,\n  globalConfig: Config.GlobalConfig,\n  projectConfig: Config.ProjectConfig,\n  resolver: Resolver,\n  context: TestRunnerContext,\n  sendMessageToJest?: TestFileEvent,\n): Promise<RunTestInternalResult> {\n  const testSource = fs.readFileSync(path, 'utf8');\n  const docblockPragmas = docblock.parse(docblock.extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n\n  let testEnvironment = projectConfig.testEnvironment;\n\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(\n        `You can only define a single test environment through docblocks, got \"${customEnvironment.join(\n          ', ',\n        )}\"`,\n      );\n    }\n    testEnvironment = resolveTestEnvironment({\n      ...projectConfig,\n      requireResolveFunction: require.resolve,\n      testEnvironment: customEnvironment,\n    });\n  }\n\n  const cacheFS = new Map([[path, testSource]]);\n  const transformer = await createScriptTransformer(projectConfig, cacheFS);\n\n  const TestEnvironment: typeof JestEnvironment =\n    await transformer.requireAndTranspileModule(testEnvironment);\n  const testFramework: TestFramework =\n    await transformer.requireAndTranspileModule(\n      process.env.JEST_JASMINE === '1'\n        ? require.resolve('jest-jasmine2')\n        : projectConfig.testRunner,\n    );\n  const Runtime: typeof RuntimeClass = interopRequireDefault(\n    projectConfig.runtime\n      ? require(projectConfig.runtime)\n      : require('jest-runtime'),\n  ).default;\n\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n  const consoleFormatter = (type: LogType, message: LogMessage) =>\n    getConsoleOutput(\n      // 4 = the console call is buried 4 stack frames deep\n      BufferedConsole.write([], type, message, 4),\n      projectConfig,\n      globalConfig,\n    );\n\n  let testConsole;\n\n  if (globalConfig.silent) {\n    testConsole = new NullConsole(consoleOut, consoleOut, consoleFormatter);\n  } else if (globalConfig.verbose) {\n    testConsole = new CustomConsole(consoleOut, consoleOut, consoleFormatter);\n  } else {\n    testConsole = new BufferedConsole();\n  }\n\n  let extraTestEnvironmentOptions;\n\n  const docblockEnvironmentOptions =\n    docblockPragmas['jest-environment-options'];\n\n  if (typeof docblockEnvironmentOptions === 'string') {\n    extraTestEnvironmentOptions = JSON.parse(docblockEnvironmentOptions);\n  }\n\n  const environment = new TestEnvironment(\n    {\n      globalConfig,\n      projectConfig: extraTestEnvironmentOptions\n        ? {\n            ...projectConfig,\n            testEnvironmentOptions: {\n              ...projectConfig.testEnvironmentOptions,\n              ...extraTestEnvironmentOptions,\n            },\n          }\n        : projectConfig,\n    },\n    {\n      console: testConsole,\n      docblockPragmas,\n      testPath: path,\n    },\n  );\n\n  if (typeof environment.getVmContext !== 'function') {\n    console.error(\n      `Test environment found at \"${testEnvironment}\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".`,\n    );\n    process.exit(1);\n  }\n\n  const leakDetector = projectConfig.detectLeaks\n    ? new LeakDetector(environment)\n    : null;\n\n  setGlobal(environment.global, 'console', testConsole);\n\n  const runtime = new Runtime(\n    projectConfig,\n    environment,\n    resolver,\n    transformer,\n    cacheFS,\n    {\n      changedFiles: context.changedFiles,\n      collectCoverage: globalConfig.collectCoverage,\n      collectCoverageFrom: globalConfig.collectCoverageFrom,\n      coverageProvider: globalConfig.coverageProvider,\n      sourcesRelatedToTestsInChangedFiles:\n        context.sourcesRelatedToTestsInChangedFiles,\n    },\n    path,\n    globalConfig,\n  );\n\n  let isTornDown = false;\n\n  const tearDownEnv = async () => {\n    if (!isTornDown) {\n      runtime.teardown();\n      await environment.teardown();\n      isTornDown = true;\n    }\n  };\n\n  const start = Date.now();\n\n  for (const path of projectConfig.setupFiles) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      const setupFile = runtime.requireModule(path);\n      if (typeof setupFile === 'function') {\n        await setupFile();\n      }\n    }\n  }\n\n  const sourcemapOptions: sourcemapSupport.Options = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      const sourceMapSource = runtime.getSourceMaps()?.get(source);\n\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs.readFileSync(sourceMapSource, 'utf8')),\n            url: source,\n          };\n        } catch {}\n      }\n      return null;\n    },\n  };\n\n  // For tests\n  runtime\n    .requireInternalModule<typeof import('source-map-support')>(\n      require.resolve('source-map-support'),\n    )\n    .install(sourcemapOptions);\n\n  // For runtime errors\n  sourcemapSupport.install(sourcemapOptions);\n\n  if (\n    environment.global &&\n    environment.global.process &&\n    environment.global.process.exit\n  ) {\n    const realExit = environment.global.process.exit;\n\n    environment.global.process.exit = function exit(...args: Array<any>) {\n      const error = new ErrorWithStack(\n        `process.exit called with \"${args.join(', ')}\"`,\n        exit,\n      );\n\n      const formattedError = formatExecError(\n        error,\n        projectConfig,\n        {noStackTrace: false},\n        undefined,\n        true,\n      );\n\n      process.stderr.write(formattedError);\n\n      return realExit(...args);\n    };\n  }\n\n  // if we don't have `getVmContext` on the env skip coverage\n  const collectV8Coverage =\n    globalConfig.collectCoverage &&\n    globalConfig.coverageProvider === 'v8' &&\n    typeof environment.getVmContext === 'function';\n\n  // Node's error-message stack size is limited at 10, but it's pretty useful\n  // to see more than that when a test fails.\n  Error.stackTraceLimit = 100;\n  try {\n    await environment.setup();\n\n    let result: TestResult;\n\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n      result = await testFramework(\n        globalConfig,\n        projectConfig,\n        environment,\n        runtime,\n        path,\n        sendMessageToJest,\n      );\n    } catch (err: any) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n\n    freezeConsole(testConsole, projectConfig);\n\n    const testCount =\n      result.numPassingTests +\n      result.numFailingTests +\n      result.numPendingTests +\n      result.numTodoTests;\n\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > projectConfig.slowTestThreshold,\n      start,\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = projectConfig.displayName;\n\n    const coverage = runtime.getAllCoverageInfoCopy();\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n\n    if (globalConfig.logHeapUsage) {\n      // @ts-expect-error - doesn't exist on globalThis\n      globalThis.gc?.();\n\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    }\n\n    await tearDownEnv();\n\n    // Delay the resolution to allow log messages to be output.\n    return await new Promise(resolve => {\n      setImmediate(() => resolve({leakDetector, result}));\n    });\n  } finally {\n    await tearDownEnv();\n\n    sourcemapSupport.resetRetrieveHandlers();\n  }\n}\n\nexport default async function runTest(\n  path: string,\n  globalConfig: Config.GlobalConfig,\n  config: Config.ProjectConfig,\n  resolver: Resolver,\n  context: TestRunnerContext,\n  sendMessageToJest?: TestFileEvent,\n): Promise<TestResult> {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config,\n    resolver,\n    context,\n    sendMessageToJest,\n  );\n\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Resolve leak detector, outside the \"runTestInternal\" closure.\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n\n  return result;\n}\n","/Users/simen/repos/jest/packages/jest-runner/src/testWorker.ts",["62","63","64"],[],"/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport exit = require('exit');\nimport type {\n  SerializableError,\n  TestFileEvent,\n  TestResult,\n} from '@jest/test-result';\nimport type {Config} from '@jest/types';\nimport HasteMap, {SerializableModuleMap} from 'jest-haste-map';\nimport {separateMessageFromStack} from 'jest-message-util';\nimport type Resolver from 'jest-resolve';\nimport Runtime from 'jest-runtime';\nimport {messageParent} from 'jest-worker';\nimport runTest from './runTest';\nimport type {ErrorWithCode, TestRunnerSerializedContext} from './types';\n\nexport type SerializableResolver = {\n  config: Config.ProjectConfig;\n  serializableModuleMap: SerializableModuleMap;\n};\n\ntype WorkerData = {\n  config: Config.ProjectConfig;\n  globalConfig: Config.GlobalConfig;\n  path: string;\n  context: TestRunnerSerializedContext;\n};\n\n// Make sure uncaught errors are logged before we exit.\nprocess.on('uncaughtException', err => {\n  console.error(err.stack);\n  exit(1);\n});\n\nconst formatError = (error: string | ErrorWithCode): SerializableError => {\n  if (typeof error === 'string') {\n    const {message, stack} = separateMessageFromStack(error);\n    return {\n      message,\n      stack,\n      type: 'Error',\n    };\n  }\n\n  return {\n    code: error.code || undefined,\n    message: error.message,\n    stack: error.stack,\n    type: 'Error',\n  };\n};\n\nconst resolvers = new Map<string, Resolver>();\nconst getResolver = (config: Config.ProjectConfig) => {\n  const resolver = resolvers.get(config.id);\n  if (!resolver) {\n    throw new Error(`Cannot find resolver for: ${config.id}`);\n  }\n  return resolver;\n};\n\nexport function setup(setupData: {\n  serializableResolvers: Array<SerializableResolver>;\n}): void {\n  // Module maps that will be needed for the test runs are passed.\n  for (const {\n    config,\n    serializableModuleMap,\n  } of setupData.serializableResolvers) {\n    const moduleMap = HasteMap.getStatic(config).getModuleMapFromJSON(\n      serializableModuleMap,\n    );\n    resolvers.set(config.id, Runtime.createResolver(config, moduleMap));\n  }\n}\n\nconst sendMessageToJest: TestFileEvent = (eventName, args) => {\n  messageParent([eventName, args]);\n};\n\nexport async function worker({\n  config,\n  globalConfig,\n  path,\n  context,\n}: WorkerData): Promise<TestResult> {\n  try {\n    return await runTest(\n      path,\n      globalConfig,\n      config,\n      getResolver(config),\n      {\n        ...context,\n        changedFiles: context.changedFiles && new Set(context.changedFiles),\n        sourcesRelatedToTestsInChangedFiles:\n          context.sourcesRelatedToTestsInChangedFiles &&\n          new Set(context.sourcesRelatedToTestsInChangedFiles),\n      },\n      sendMessageToJest,\n    );\n  } catch (error: any) {\n    throw formatError(error);\n  }\n}\n","/Users/simen/repos/jest/packages/jest-runner/src/types.ts",[],[],{"ruleId":"65","severity":2,"message":"66","line":23,"column":45,"nodeType":"67","messageId":"68","endLine":23,"endColumn":76},{"ruleId":"69","severity":2,"message":"70","line":23,"column":45,"nodeType":"67","messageId":"71","endLine":23,"endColumn":60},{"ruleId":"72","severity":2,"message":"73","line":23,"column":53,"nodeType":"74","messageId":"75","endLine":23,"endColumn":59},{"ruleId":"76","severity":2,"message":"77","line":48,"column":10,"nodeType":"78","messageId":"79","endLine":48,"endColumn":31},{"ruleId":"76","severity":2,"message":"77","line":50,"column":10,"nodeType":"78","messageId":"79","endLine":50,"endColumn":31},{"ruleId":"76","severity":2,"message":"77","line":57,"column":10,"nodeType":"78","messageId":"79","endLine":57,"endColumn":31},{"ruleId":"72","severity":2,"message":"80","line":89,"column":62,"nodeType":"81","messageId":"75","endLine":89,"endColumn":75},{"ruleId":"82","severity":2,"message":"83","line":121,"column":9,"nodeType":"67","messageId":"84","endLine":121,"endColumn":27},{"ruleId":"82","severity":2,"message":"83","line":122,"column":9,"nodeType":"67","messageId":"84","endLine":122,"endColumn":27},{"ruleId":"85","severity":2,"message":"86","line":153,"column":44,"nodeType":"87","messageId":"88","endLine":154,"endColumn":52},{"ruleId":"72","severity":2,"message":"80","line":174,"column":65,"nodeType":"81","messageId":"75","endLine":174,"endColumn":78},{"ruleId":"82","severity":2,"message":"89","line":91,"column":7,"nodeType":"74","messageId":"90","endLine":91,"endColumn":24},{"ruleId":"91","severity":2,"message":"92","line":117,"column":9,"nodeType":"93","messageId":"94","endLine":121,"endColumn":12},{"ruleId":"76","severity":2,"message":"95","line":117,"column":40,"nodeType":"78","messageId":"79","endLine":121,"endColumn":12},{"ruleId":"82","severity":2,"message":"96","line":118,"column":5,"nodeType":"78","messageId":"97","endLine":118,"endColumn":26,"suggestions":"98"},{"ruleId":"82","severity":2,"message":"99","line":134,"column":7,"nodeType":"78","messageId":"100","endLine":134,"endColumn":26,"suggestions":"101"},{"ruleId":"82","severity":2,"message":"99","line":136,"column":14,"nodeType":"78","messageId":"100","endLine":136,"endColumn":34,"suggestions":"102"},{"ruleId":"91","severity":2,"message":"92","line":148,"column":5,"nodeType":"103","messageId":"94","endLine":148,"endColumn":73},{"ruleId":"82","severity":2,"message":"104","line":154,"column":22,"nodeType":"74","messageId":"105","endLine":154,"endColumn":49,"suggestions":"106"},{"ruleId":"91","severity":2,"message":"92","line":157,"column":13,"nodeType":"107","messageId":"94","endLine":160,"endColumn":14},{"ruleId":"82","severity":2,"message":"96","line":233,"column":11,"nodeType":"74","messageId":"97","endLine":233,"endColumn":26,"suggestions":"108"},{"ruleId":"91","severity":2,"message":"92","line":236,"column":13,"nodeType":"107","messageId":"94","endLine":236,"endColumn":70},{"ruleId":"82","severity":2,"message":"83","line":256,"column":5,"nodeType":"78","messageId":"84","endLine":256,"endColumn":23},{"ruleId":"82","severity":2,"message":"83","line":257,"column":5,"nodeType":"78","messageId":"84","endLine":257,"endColumn":31},{"ruleId":"82","severity":2,"message":"83","line":258,"column":5,"nodeType":"78","messageId":"84","endLine":258,"endColumn":36},{"ruleId":"109","severity":2,"message":"110","line":260,"column":22,"nodeType":"78","messageId":"111","endLine":260,"endColumn":53},{"ruleId":"72","severity":2,"message":"112","line":278,"column":23,"nodeType":"113","messageId":"114","endLine":278,"endColumn":30},{"ruleId":"76","severity":2,"message":"115","line":310,"column":7,"nodeType":"78","messageId":"79","endLine":310,"endColumn":16},{"ruleId":"82","severity":2,"message":"83","line":341,"column":9,"nodeType":"74","messageId":"84","endLine":341,"endColumn":17},{"ruleId":"82","severity":2,"message":"83","line":350,"column":11,"nodeType":"74","messageId":"84","endLine":350,"endColumn":21},{"ruleId":"69","severity":2,"message":"70","line":357,"column":7,"nodeType":"78","messageId":"71","endLine":357,"endColumn":20},{"ruleId":"82","severity":2,"message":"96","line":53,"column":11,"nodeType":"78","messageId":"97","endLine":53,"endColumn":21,"suggestions":"116"},{"ruleId":"117","severity":2,"message":"118","line":53,"column":22,"nodeType":"119","messageId":"120","endLine":53,"endColumn":24,"suggestions":"121"},{"ruleId":"72","severity":2,"message":"122","line":110,"column":23,"nodeType":"74","messageId":"75","endLine":110,"endColumn":28},"@typescript-eslint/no-unsafe-return","Unsafe return of an `any` typed value.","CallExpression","unsafeReturn","@typescript-eslint/no-unsafe-call","Unsafe call of an `any` typed value.","unsafeCall","@typescript-eslint/no-unsafe-argument","Unsafe argument of type `any` assigned to a parameter of type `string`.","Identifier","unsafeArgument","@typescript-eslint/no-unsafe-member-access","Unsafe member access .worker on an `any` value.","MemberExpression","unsafeMemberExpression","Unsafe argument of type `[Test, any]` assigned to a parameter of type `[Test, SerializableError]`.","ArrayExpression","@typescript-eslint/strict-boolean-expressions","Unexpected object value in conditional. The condition is always true.","conditionErrorObject","@typescript-eslint/no-misused-promises","Promise returned in function argument where a void return was expected.","ArrowFunctionExpression","voidReturnArgument","Unexpected value in conditional. A boolean expression is required.","conditionErrorOther","@typescript-eslint/no-unsafe-assignment","Unsafe assignment of an `any` value.","VariableDeclarator","anyAssignment","Unsafe member access .default on an `any` value.","Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.","conditionErrorNullableString",["123","124","125"],"Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.","conditionErrorNullableBoolean",["126","127"],["128","129"],"AssignmentExpression","Unexpected any value in conditional. An explicit comparison or type cast is required.","conditionErrorAny",["130"],"Property",["131","132","133"],"@typescript-eslint/unbound-method","Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead.","unboundWithoutThisAnnotation","Unsafe spread of an `any` array type.","SpreadElement","unsafeArraySpread","Unsafe member access .stack on an `any` value.",["134","135","136"],"@typescript-eslint/prefer-nullish-coalescing","Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","Punctuator","preferNullishOverOr",["137"],"Unsafe argument of type `any` assigned to a parameter of type `string | ErrorWithCode`.",{"messageId":"138","fix":"139","desc":"140"},{"messageId":"141","fix":"142","desc":"143"},{"messageId":"144","fix":"145","desc":"146"},{"messageId":"147","fix":"148","desc":"149"},{"messageId":"150","fix":"151","desc":"152"},{"messageId":"147","fix":"153","desc":"149"},{"messageId":"150","fix":"154","desc":"152"},{"messageId":"144","fix":"155","desc":"146"},{"messageId":"138","fix":"156","desc":"140"},{"messageId":"141","fix":"157","desc":"143"},{"messageId":"144","fix":"158","desc":"146"},{"messageId":"138","fix":"159","desc":"140"},{"messageId":"141","fix":"160","desc":"143"},{"messageId":"144","fix":"161","desc":"146"},{"messageId":"162","fix":"163","desc":"164"},"conditionFixCompareNullish",{"range":"165","text":"166"},"Change condition to check for null/undefined (`value != null`)","conditionFixDefaultEmptyString",{"range":"165","text":"167"},"Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)","conditionFixCastBoolean",{"range":"165","text":"168"},"Explicitly cast value to a boolean (`Boolean(value)`)","conditionFixDefaultFalse",{"range":"169","text":"170"},"Explicitly treat nullish value the same as false (`value ?? false`)","conditionFixCompareTrue",{"range":"169","text":"171"},"Change condition to check if true (`value === true`)",{"range":"172","text":"173"},{"range":"172","text":"174"},{"range":"175","text":"176"},{"range":"177","text":"178"},{"range":"177","text":"179"},{"range":"177","text":"180"},{"range":"181","text":"182"},{"range":"181","text":"183"},{"range":"181","text":"184"},"suggestNullish",{"range":"185","text":"186"},"Fix to nullish coalescing operator (`??`).",[3973,3994],"(projectConfig.runtime != null)","(projectConfig.runtime ?? \"\")","(Boolean(projectConfig.runtime))",[4435,4454],"globalConfig.silent ?? false","globalConfig.silent === true",[4548,4568],"globalConfig.verbose ?? false","globalConfig.verbose === true",[5056,5083],"(Boolean(extraTestEnvironmentOptions))",[7093,7108],"sourceMapSource != null","sourceMapSource ?? \"\"","Boolean(sourceMapSource)",[1411,1421],"(error.code != null)","(error.code ?? \"\")","(Boolean(error.code))",[1422,1424],"??"]